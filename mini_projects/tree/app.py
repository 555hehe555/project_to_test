import os
import stat
import sys
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

from colorama import init, Fore, Style

init(autoreset=True)
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))


class TreeConfig:
    def __init__(self):
        self.config = {
            'excluded_folders': [".git", "__pycache__", "venv", ".idea", "–¥–æ–º–∞—à–Ω—è"],
            'max_depth': 0,
            'show_files': True,
            'show_hidden': True,
            'file_icons': True,
            'last_path': SCRIPT_DIR,
        }


# –í–∏–∑–Ω–∞—á–∞—î–º–æ SCRIPT_DIR –∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–ª—è .exe
if getattr(sys, 'frozen', False):
    SCRIPT_DIR = os.path.dirname(sys.executable)
else:
    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))


class App(tk.Tk):
    def __init__(self, config):
        super().__init__()
        self.title("–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫")
        self.config_obj = config
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —à–ª—è—Ö —è–∫ SCRIPT_DIR
        self.path_var = tk.StringVar(value=SCRIPT_DIR)
        self.excluded_var = tk.StringVar(value=",".join(self.config_obj.config['excluded_folders']))
        self.create_widgets()

    def choose_directory(self):
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é –ø–∞–ø–∫–æ—é SCRIPT_DIR
        path = filedialog.askdirectory(initialdir=SCRIPT_DIR)
        if path:
            self.path_var.set(path)

    def create_widgets(self):
        padding = {'padx': 5, 'pady': 5}

        frame = ttk.LabelFrame(self, text="–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞")
        frame.pack(fill='x', **padding)
        ttk.Entry(frame, textvariable=self.path_var, width=50).pack(side='left', fill='x', expand=True, **padding)
        ttk.Button(frame, text="–û–±—Ä–∞—Ç–∏...", command=self.choose_directory).pack(side='left', **padding)

        options = ttk.LabelFrame(self, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        options.pack(fill='x', **padding)

        self.depth_spin = ttk.Spinbox(options, from_=0, to=100, width=5)
        self.depth_spin.insert(0, str(self.config_obj.config['max_depth']))
        ttk.Label(options, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥–ª–∏–±–∏–Ω–∞ (0 = –±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è):").grid(row=0, column=0, sticky='w', **padding)
        self.depth_spin.grid(row=0, column=1, **padding)

        self.hidden_var = tk.BooleanVar(value=self.config_obj.config['show_hidden'])
        ttk.Checkbutton(options, text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ", variable=self.hidden_var).grid(row=1, column=0,
                                                                                             columnspan=2, sticky='w',
                                                                                             **padding)

        self.files_var = tk.BooleanVar(value=self.config_obj.config['show_files'])
        ttk.Checkbutton(options, text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏", variable=self.files_var).grid(row=2, column=0, columnspan=2,
                                                                                        sticky='w', **padding)

        self.icons_var = tk.BooleanVar(value=self.config_obj.config['file_icons'])
        ttk.Checkbutton(options, text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —ñ–∫–æ–Ω–∫–∏", variable=self.icons_var).grid(row=3, column=0, columnspan=2,
                                                                                         sticky='w', **padding)

        ttk.Label(options, text="–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").grid(row=4, column=0, sticky='w', **padding)
        ttk.Entry(options, textvariable=self.excluded_var, width=40).grid(row=4, column=1, sticky='w', **padding)

        ttk.Button(self, text="–°–∫–∞–Ω—É–≤–∞—Ç–∏", command=self.run_scan).pack(pady=10)

        self.stats_label = ttk.Label(self, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ º—è–≤–∏—Ç—å—Å—è —Ç—É—Ç.")
        self.stats_label.pack(pady=(0, 10))

    def run_scan(self):
        path = self.path_var.get()
        if not os.path.isdir(path):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∫–∞–∂—ñ—Ç—å —ñ—Å–Ω—É—é—á—É –ø–∞–ø–∫—É")
            return

        excluded_raw = [x.strip().lower() for x in self.excluded_var.get().split(',') if x.strip()]

        self.config_obj.config.update({
            'max_depth': int(self.depth_spin.get()),
            'show_hidden': self.hidden_var.get(),
            'show_files': self.files_var.get(),
            'file_icons': self.icons_var.get(),
            'last_path': path,
            'excluded_folders': excluded_raw,
        })

        # 1. –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–µ—Ä–µ–≤–æ –¥–ª—è –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø —ñ —Ä–∞—Ö—É—î–º–æ –í–Ü–î–û–ë–†–ê–ñ–ï–ù–Ü –ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∏
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ –æ–±'—î–∫—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        output_lines, display_stats = generate_tree(path, self.config_obj)

        # 2. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ü–û–í–ù–ò–ô —Ä–æ–∑–º—ñ—Ä –ø–∞–ø–∫–∏ –æ–∫—Ä–µ–º–æ
        total_size = calculate_total_size(path)

        # 3. –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = {
            'folders': display_stats.get('folders', 0),  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑ generate_tree
            'files': display_stats.get('files', 0),  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑ generate_tree
            'size': total_size  # –ü–æ–≤–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∑ calculate_total_size
        }

        # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ä–µ–≤–æ –≤ –∫–æ–Ω—Å–æ–ª—å –∑ —Ä–æ–∑—Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è–º
        print(f"\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏: {os.path.abspath(path)}")
        for line in output_lines:
            is_dir_indicator = "üìÅ" in line or "‚õî" in line or "üö´" in line
            is_file_indicator = "üìÑ" in line
            if is_dir_indicator:
                print(colorize(line, True))
            elif is_file_indicator:
                print(colorize(line, False, line))
            else:
                print(line)

        # –û–Ω–æ–≤–ª—é—î–º–æ –ª–µ–π–±–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ GUI
        self.stats_label.config(
            text=f"üìä –ü–∞–ø–æ–∫ (–≤—ñ–¥–æ–±—Ä.): {final_stats['folders']} | "
                 f"–§–∞–π–ª—ñ–≤ (–≤—ñ–¥–æ–±—Ä.): {final_stats['files']} | "
                 f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {human_readable_size(final_stats['size'])}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–∞–π–ª
        output_path = os.path.join(SCRIPT_DIR, "structure.txt")
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(f"üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏: {os.path.abspath(path)}\n")
                f.write(f"‚öôÔ∏è –ì–ª–∏–±–∏–Ω–∞: {self.config_obj.config['max_depth'] or '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'} | "
                        f"–§–∞–π–ª–∏: {'—Ç–∞–∫' if self.config_obj.config['show_files'] else '–Ω—ñ'} | "
                        f"–ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ: {'—Ç–∞–∫' if self.config_obj.config['show_hidden'] else '–Ω—ñ'} | "
                        f"–Ü–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {', '.join(self.config_obj.config['excluded_folders']) or '–Ω–µ–º–∞—î'}\n\n")
                f.write('\n'.join(output_lines))
                f.write(f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                        f"  üìÅ –ü–∞–ø–æ–∫ (–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ): {final_stats['folders']}\n"  # –£—Ç–æ—á–Ω–µ–Ω–Ω—è
                        f"  üìÑ –§–∞–π–ª—ñ–≤ (–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ): {final_stats['files']}\n"  # –£—Ç–æ—á–Ω–µ–Ω–Ω—è
                        f"  üíæ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {human_readable_size(final_stats['size'])}\n")  # –ü–æ–≤–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤:\n{output_path}")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª:\n{e}")


def human_readable_size(size_bytes):
    if size_bytes is None or size_bytes < 0:  # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None –∞–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        return "–ù/–î"
    if size_bytes == 0:
        return "0 –ë"
    units = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë']
    i = 0
    while size_bytes >= 1024 and i < len(units) - 1:
        size_bytes /= 1024.0
        i += 1
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ f-string –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    return f"{size_bytes:.1f} {units[i]}" if size_bytes % 1 != 0 else f"{int(size_bytes)} {units[i]}"


def colorize(item_text, is_dir, full_item_name=None):
    if is_dir:
        return Fore.BLUE + item_text + Style.RESET_ALL
    else:
        check_name = full_item_name if full_item_name else item_text
        if check_name.endswith(".py"):
            return Fore.YELLOW + item_text + Style.RESET_ALL
        else:
            return Fore.GREEN + item_text + Style.RESET_ALL


def is_hidden(filepath):
    try:
        if os.name == 'posix':
            return os.path.basename(filepath).startswith('.')
        elif os.name == 'nt':
            attrs = os.stat(filepath).st_file_attributes
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ HIDDEN –∞–±–æ SYSTEM
            return attrs & (stat.FILE_ATTRIBUTE_HIDDEN | stat.FILE_ATTRIBUTE_SYSTEM)
    except OSError:
        return False
    return False


# --- –§—É–Ω–∫—Ü—ñ—è generate_tree —Ç–µ–ø–µ—Ä –ù–ï –†–ê–•–£–Ñ –†–û–ó–ú–Ü–† ---
def generate_tree(root_path, config_obj, prefix='', depth=0, stats=None):
    """
    –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø–∞–ø–æ–∫ –¥–ª—è –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø —Ç–∞ —Ä–∞—Ö—É—î –ö–Ü–õ–¨–ö–Ü–°–¢–¨
    –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤. –ù–ï –†–ê–•–£–Ñ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä.
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –õ–ò–®–ï –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    if stats is None:
        stats = {'folders': 0, 'files': 0}  # –†–æ–∑–º—ñ—Ä —Ç—É—Ç –Ω–µ —Ä–∞—Ö—É—î–º–æ!

    if config_obj.config['max_depth'] > 0 and depth >= config_obj.config['max_depth']:
        return [], stats

    output_lines = []
    excluded_lower = config_obj.config['excluded_folders']

    try:
        entries = os.listdir(root_path)
    except OSError as e:
        error_line = prefix + f"‚õî [–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {e.strerror}]"
        output_lines.append(error_line)
        return output_lines, stats

    items_to_process = []
    for entry_name in entries:
        entry_path = os.path.join(root_path, entry_name)
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ lstat —â–æ–± –Ω–µ –π—Ç–∏ –∑–∞ —Å–∏–º–≤–æ–ª—ñ—á–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
            entry_stat = os.lstat(entry_path)
            is_dir = stat.S_ISDIR(entry_stat.st_mode)
            is_link = stat.S_ISLNK(entry_stat.st_mode)

            # –Ø–∫—â–æ —Ü–µ —Å–∏–º–≤–æ–ª—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, –≤–≤–∞–∂–∞—î–º–æ —ó—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            # –ê–ª–µ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ä–µ–∫—É—Ä—Å—ñ—ó
            if is_link:
                try:
                    # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö
                    real_path = os.path.realpath(entry_path)
                    if os.path.isdir(real_path):
                        is_dir = True  # –Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∫–∞–∑—É—î –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
                except OSError:
                    pass  # –ó–∞–ª–∏—à–∞—î–º–æ is_dir=False —è–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ

            if not config_obj.config['show_hidden'] and is_hidden(
                    entry_path):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ—Å—Ç—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É
                continue
            if not is_dir and not config_obj.config['show_files']:
                continue

            items_to_process.append({
                'name': entry_name,
                'path': entry_path,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏
                'is_dir': is_dir
                # –†–æ–∑–º—ñ—Ä —Ç—É—Ç –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
            })
        except OSError:
            continue

    items_to_process.sort(key=lambda x: (not x['is_dir'], x['name'].lower()))

    count = len(items_to_process)
    for i, item in enumerate(items_to_process):
        is_last = (i == count - 1)
        connector = '‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '
        current_prefix = prefix + connector
        next_level_prefix = prefix + ('    ' if is_last else '‚îÇ   ')

        if item['is_dir']:
            folder_name = item['name']
            folder_path = item['path']
            icon = "üìÅ " if config_obj.config['file_icons'] else ""
            folder_line = current_prefix + icon + folder_name
            output_lines.append(folder_line)
            stats['folders'] += 1  # –†–∞—Ö—É—î–º–æ –ø–∞–ø–∫—É (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)

            if folder_name.lower() in excluded_lower:
                ignore_line = next_level_prefix + "üö´ –í–º—ñ—Å—Ç –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"
                output_lines.append(ignore_line)
            else:
                # –†–µ–∫—É—Ä—Å—ñ—è –ª–∏—à–µ –¥–ª—è –Ω–µ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö –ø–∞–ø–æ–∫
                sub_lines, stats = generate_tree(folder_path, config_obj, next_level_prefix, depth + 1, stats)
                output_lines.extend(sub_lines)
        else:  # –¶–µ —Ñ–∞–π–ª –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫–µ –Ω–µ —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é
            file_name = item['name']
            icon = "üìÑ " if config_obj.config['file_icons'] else ""
            file_line = current_prefix + icon + file_name
            output_lines.append(file_line)
            stats['files'] += 1  # –†–∞—Ö—É—î–º–æ —Ñ–∞–π–ª (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
            # –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É —Ç—É—Ç –Ω–µ –¥–æ–¥–∞—î–º–æ!

    return output_lines, stats


# --- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –†–û–ó–†–ê–•–£–ù–ö–£ –ü–û–í–ù–û–ì–û –†–û–ó–ú–Ü–†–£ ---
def calculate_total_size(root_path):
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–æ–≤–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–∞–ø–∫–∏ —Ç–∞ —ó—ó –≤–º—ñ—Å—Ç—É, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ.
    –Ü–≥–Ω–æ—Ä—É—î –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª—ñ–≤.
    """
    total_size = 0
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ os.scandir –¥–ª—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        for entry in os.scandir(root_path):
            try:
                if entry.is_dir(follow_symlinks=False):
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –¥–ª—è –ø—ñ–¥–ø–∞–ø–æ–∫
                    total_size += calculate_total_size(entry.path)
                elif entry.is_file(follow_symlinks=False):
                    # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                    total_size += entry.stat(follow_symlinks=False).st_size
            except OSError:
                # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –æ–∫—Ä–µ–º–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (—Ñ–∞–π–ª–∏, –ø–∞–ø–∫–∏)
                # –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –∞–±–æ —è–∫—â–æ —Ñ–∞–π–ª –∑–Ω–∏–∫
                # print(f"Warning: Cannot access '{entry.path}', skipping size calculation.")
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    except OSError as e:
        # –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∞–º–æ—ó root_path –ø–∞–ø–∫–∏
        return 0  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ -1 –∞–±–æ —ñ–Ω—à–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–º–∏–ª–∫–∏

    return total_size


if __name__ == "__main__":
    config = TreeConfig()
    app = App(config)
    app.mainloop()
