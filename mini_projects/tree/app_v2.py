import os
import stat
import sys
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import json
import datetime
import webbrowser
from pathlib import Path
import mimetypes
import subprocess

from colorama import init, Fore, Style

init(autoreset=True)
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))


class TreeConfig:
    def __init__(self):
        self.config = {
            'excluded_folders': [".git", "__pycache__", "venv", ".idea", "node_modules", "bin", "obj"],
            'excluded_extensions': ['.tmp', '.log', '.cache'],
            'max_depth': 0,
            'show_files': True,
            'show_hidden': True,
            'file_icons': True,
            'show_sizes': True,
            'show_dates': True,
            'show_permissions': False,
            'group_by_type': False,
            'last_path': SCRIPT_DIR,
            'output_format': 'tree'  # 'tree', 'json', 'csv'
        }

    def save_config(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É —Ñ–∞–π–ª"""
        config_path = os.path.join(SCRIPT_DIR, "scanner_config.json")
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception:
            pass

    def load_config(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ —Ñ–∞–π–ª—É"""
        config_path = os.path.join(SCRIPT_DIR, "scanner_config.json")
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    self.config.update(loaded_config)
        except Exception:
            pass


# –í–∏–∑–Ω–∞—á–∞—î–º–æ SCRIPT_DIR –∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–ª—è .exe
if getattr(sys, 'frozen', False):
    SCRIPT_DIR = os.path.dirname(sys.executable)
else:
    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))


class FileTypeAnalyzer:
    """–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó"""

    @staticmethod
    def get_file_category(filepath):
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ñ–∞–π–ª—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º"""
        ext = os.path.splitext(filepath)[1].lower()

        categories = {
            'code': ['.py', '.js', '.html', '.css', '.cpp', '.c', '.java', '.php', '.rb', '.go', '.rs', '.ts'],
            'image': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.ico'],
            'video': ['.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm'],
            'audio': ['.mp3', '.wav', '.flac', '.aac', '.ogg', '.m4a'],
            'document': ['.pdf', '.doc', '.docx', '.txt', '.md', '.rtf', '.odt'],
            'archive': ['.zip', '.rar', '.7z', '.tar', '.gz', '.bz2'],
            'data': ['.json', '.xml', '.csv', '.xlsx', '.db', '.sql']
        }

        for category, extensions in categories.items():
            if ext in extensions:
                return category
        return 'other'

    @staticmethod
    def get_file_icon(filepath, is_dir=False):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —ñ–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª—É –∞–±–æ –ø–∞–ø–∫–∏"""
        if is_dir:
            return "üìÅ"

        category = FileTypeAnalyzer.get_file_category(filepath)
        icons = {
            'code': 'üíª',
            'image': 'üñºÔ∏è',
            'video': 'üé¨',
            'audio': 'üéµ',
            'document': 'üìÑ',
            'archive': 'üì¶',
            'data': 'üìä',
            'other': 'üìÑ'
        }
        return icons.get(category, 'üìÑ')


class App(tk.Tk):
    def __init__(self, config):
        super().__init__()
        self.title("–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–∫–∞–Ω–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫ v2.0")
        self.geometry("900x700")
        self.config_obj = config
        self.config_obj.load_config()

        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è GUI
        self.path_var = tk.StringVar(value=self.config_obj.config.get('last_path', SCRIPT_DIR))
        self.excluded_var = tk.StringVar(value=",".join(self.config_obj.config['excluded_folders']))
        self.excluded_ext_var = tk.StringVar(value=",".join(self.config_obj.config['excluded_extensions']))

        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        self.scan_results = None
        self.file_paths = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤

        self.create_widgets()
        self.create_menu()

    def create_menu(self):
        """–°—Ç–≤–æ—Ä—é—î –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏"""
        menubar = tk.Menu(self)
        self.config(menu=menubar)

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ï–∫—Å–ø–æ—Ä—Ç —É JSON", command=self.export_json)
        file_menu.add_command(label="–ï–∫—Å–ø–æ—Ä—Ç —É CSV", command=self.export_csv)
        file_menu.add_command(label="–ï–∫—Å–ø–æ—Ä—Ç —É HTML", command=self.export_html)
        file_menu.add_separator()
        file_menu.add_command(label="–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.config_obj.save_config)
        file_menu.add_command(label="–í–∏—Ö—ñ–¥", command=self.quit)

        # –ú–µ–Ω—é –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", menu=tools_menu)
        tools_menu.add_command(label="–ó–Ω–∞–π—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤", command=self.find_duplicates)
        tools_menu.add_command(label="–ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ñ–∞–π–ª—ñ–≤", command=self.analyze_file_sizes)
        tools_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤", command=self.file_type_statistics)

    def choose_directory(self):
        path = filedialog.askdirectory(initialdir=self.config_obj.config.get('last_path', SCRIPT_DIR))
        if path:
            self.path_var.set(path)

    def create_widgets(self):
        # –°—Ç–≤–æ—Ä—é—î–º–æ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill='both', expand=True, padx=5, pady=5)

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.create_settings_tab()

        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.create_results_tab()

        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        self.create_analytics_tab()

    def create_settings_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

        padding = {'padx': 5, 'pady': 5}

        # –¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞
        path_frame = ttk.LabelFrame(settings_frame, text="üéØ –¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞")
        path_frame.pack(fill='x', **padding)

        path_entry_frame = ttk.Frame(path_frame)
        path_entry_frame.pack(fill='x', **padding)

        ttk.Entry(path_entry_frame, textvariable=self.path_var, width=50).pack(side='left', fill='x', expand=True,
                                                                               **padding)
        ttk.Button(path_entry_frame, text="–û–±—Ä–∞—Ç–∏...", command=self.choose_directory).pack(side='left', **padding)
        ttk.Button(path_entry_frame, text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É", command=self.open_in_explorer).pack(side='left',
                                                                                                       **padding)

        # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        main_options = ttk.LabelFrame(settings_frame, text="üîß –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        main_options.pack(fill='x', **padding)

        # –ì–ª–∏–±–∏–Ω–∞
        depth_frame = ttk.Frame(main_options)
        depth_frame.pack(fill='x', **padding)
        ttk.Label(depth_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥–ª–∏–±–∏–Ω–∞ (0 = –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å):").pack(side='left')
        self.depth_spin = ttk.Spinbox(depth_frame, from_=0, to=100, width=5)
        self.depth_spin.pack(side='right')
        self.depth_spin.insert(0, str(self.config_obj.config['max_depth']))

        # –ß–µ–∫–±–æ–∫—Å–∏
        self.hidden_var = tk.BooleanVar(value=self.config_obj.config['show_hidden'])
        ttk.Checkbutton(main_options, text="üîç –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏/–ø–∞–ø–∫–∏", variable=self.hidden_var).pack(
            anchor='w', **padding)

        self.files_var = tk.BooleanVar(value=self.config_obj.config['show_files'])
        ttk.Checkbutton(main_options, text="üìÑ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏", variable=self.files_var).pack(anchor='w', **padding)

        self.icons_var = tk.BooleanVar(value=self.config_obj.config['file_icons'])
        ttk.Checkbutton(main_options, text="üé® –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —ñ–∫–æ–Ω–∫–∏", variable=self.icons_var).pack(anchor='w', **padding)

        self.sizes_var = tk.BooleanVar(value=self.config_obj.config['show_sizes'])
        ttk.Checkbutton(main_options, text="üìè –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ —Ñ–∞–π–ª—ñ–≤", variable=self.sizes_var).pack(anchor='w',
                                                                                                        **padding)

        self.dates_var = tk.BooleanVar(value=self.config_obj.config['show_dates'])
        ttk.Checkbutton(main_options, text="üìÖ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–∞—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó", variable=self.dates_var).pack(anchor='w',
                                                                                                          **padding)

        self.permissions_var = tk.BooleanVar(value=self.config_obj.config['show_permissions'])
        ttk.Checkbutton(main_options, text="üîí –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É", variable=self.permissions_var).pack(anchor='w',
                                                                                                             **padding)

        self.group_by_type_var = tk.BooleanVar(value=self.config_obj.config['group_by_type'])
        ttk.Checkbutton(main_options, text="üóÇÔ∏è –ì—Ä—É–ø—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –∑–∞ —Ç–∏–ø–æ–º", variable=self.group_by_type_var).pack(
            anchor='w', **padding)

        # –í–∏–∫–ª—é—á–µ–Ω–Ω—è
        exclusions_frame = ttk.LabelFrame(settings_frame, text="üö´ –í–∏–∫–ª—é—á–µ–Ω–Ω—è")
        exclusions_frame.pack(fill='x', **padding)

        ttk.Label(exclusions_frame, text="–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–∞–ø–∫–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").pack(anchor='w', **padding)
        ttk.Entry(exclusions_frame, textvariable=self.excluded_var, width=60).pack(fill='x', **padding)

        ttk.Label(exclusions_frame, text="–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").pack(anchor='w', **padding)
        ttk.Entry(exclusions_frame, textvariable=self.excluded_ext_var, width=60).pack(fill='x', **padding)

        # –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É
        format_frame = ttk.LabelFrame(settings_frame, text="üìã –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É")
        format_frame.pack(fill='x', **padding)

        self.format_var = tk.StringVar(value=self.config_obj.config['output_format'])
        ttk.Radiobutton(format_frame, text="üå≥ –î–µ—Ä–µ–≤–æ", variable=self.format_var, value='tree').pack(anchor='w',
                                                                                                    **padding)
        ttk.Radiobutton(format_frame, text="üìä JSON", variable=self.format_var, value='json').pack(anchor='w', **padding)
        ttk.Radiobutton(format_frame, text="üìà CSV", variable=self.format_var, value='csv').pack(anchor='w', **padding)

        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        buttons_frame = ttk.Frame(settings_frame)
        buttons_frame.pack(fill='x', pady=10)

        ttk.Button(buttons_frame, text="üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏", command=self.run_scan).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.save_settings).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="üîÑ –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.reset_settings).pack(side='left', padx=5)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ttk.Label(settings_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è.")
        self.stats_label.pack(pady=(10, 5))

    def create_results_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        results_frame = ttk.Frame(self.notebook)
        self.notebook.add(results_frame, text="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏")

        # –§—Ä–µ–π–º –¥–ª—è –ø–æ—à—É–∫—É
        search_frame = ttk.Frame(results_frame)
        search_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(search_frame, text="üîç –ü–æ—à—É–∫:").pack(side='left', padx=(0, 5))
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_results)
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=30)
        search_entry.pack(side='left', padx=(0, 5))

        ttk.Button(search_frame, text="üóÇÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É", command=self.open_selected_folder).pack(side='right', padx=5)
        ttk.Button(search_frame, text="üìÑ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª", command=self.open_selected_file).pack(side='right', padx=5)

        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_text = scrolledtext.ScrolledText(results_frame, height=25, font=("Consolas", 10))
        self.results_text.pack(fill='both', expand=True, padx=5, pady=5)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —à–ª—è—Ö", command=self.copy_path)
        self.context_menu.add_command(label="üìÇ –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É", command=self.open_in_explorer_context)
        self.context_menu.add_command(label="üìÑ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª", command=self.open_file_context)

        self.results_text.bind("<Button-3>", self.show_context_menu)

    def create_analytics_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é"""
        analytics_frame = ttk.Frame(self.notebook)
        self.notebook.add(analytics_frame, text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        analytics_buttons = ttk.Frame(analytics_frame)
        analytics_buttons.pack(fill='x', padx=5, pady=5)

        ttk.Button(analytics_buttons, text="üìà –¢–æ–ø –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —Ñ–∞–π–ª—ñ–≤", command=self.show_largest_files).pack(side='left',
                                                                                                            padx=5)
        ttk.Button(analytics_buttons, text="üóÇÔ∏è –¢–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤", command=self.show_file_types).pack(side='left', padx=5)
        ttk.Button(analytics_buttons, text="üìÖ –û—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏", command=self.show_recent_files).pack(side='left', padx=5)

        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        self.analytics_text = scrolledtext.ScrolledText(analytics_frame, height=25, font=("Consolas", 10))
        self.analytics_text.pack(fill='both', expand=True, padx=5, pady=5)

    def save_settings(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        self.update_config()
        self.config_obj.save_config()
        messagebox.showinfo("–ó–±–µ—Ä–µ–∂–µ–Ω–æ", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    def reset_settings(self):
        """–°–∫–∏–¥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        self.config_obj.config = TreeConfig().config
        self.update_gui_from_config()
        messagebox.showinfo("–°–∫–∏–Ω—É—Ç–æ", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!")

    def update_gui_from_config(self):
        """–û–Ω–æ–≤–ª—é—î GUI –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        self.path_var.set(self.config_obj.config.get('last_path', SCRIPT_DIR))
        self.excluded_var.set(",".join(self.config_obj.config['excluded_folders']))
        self.excluded_ext_var.set(",".join(self.config_obj.config['excluded_extensions']))
        self.depth_spin.delete(0, tk.END)
        self.depth_spin.insert(0, str(self.config_obj.config['max_depth']))

        # –û–Ω–æ–≤–ª—é—î–º–æ —á–µ–∫–±–æ–∫—Å–∏
        self.hidden_var.set(self.config_obj.config['show_hidden'])
        self.files_var.set(self.config_obj.config['show_files'])
        self.icons_var.set(self.config_obj.config['file_icons'])
        self.sizes_var.set(self.config_obj.config['show_sizes'])
        self.dates_var.set(self.config_obj.config['show_dates'])
        self.permissions_var.set(self.config_obj.config['show_permissions'])
        self.group_by_type_var.set(self.config_obj.config['group_by_type'])
        self.format_var.set(self.config_obj.config['output_format'])

    def update_config(self):
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ GUI"""
        self.config_obj.config.update({
            'max_depth': int(self.depth_spin.get()),
            'show_hidden': self.hidden_var.get(),
            'show_files': self.files_var.get(),
            'file_icons': self.icons_var.get(),
            'show_sizes': self.sizes_var.get(),
            'show_dates': self.dates_var.get(),
            'show_permissions': self.permissions_var.get(),
            'group_by_type': self.group_by_type_var.get(),
            'last_path': self.path_var.get(),
            'excluded_folders': [x.strip().lower() for x in self.excluded_var.get().split(',') if x.strip()],
            'excluded_extensions': [x.strip().lower() for x in self.excluded_ext_var.get().split(',') if x.strip()],
            'output_format': self.format_var.get(),
        })

    def open_in_explorer(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É"""
        path = self.path_var.get()
        if os.path.isdir(path):
            self.open_path_in_system(path)

    def open_selected_folder(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –≤–∏–±—Ä–∞–Ω—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞–ø–∫—É"""
        current_line = self.get_current_line()
        if current_line:
            path = self.extract_path_from_line(current_line)
            if path and os.path.isdir(path):
                self.open_path_in_system(path)

    def open_selected_file(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –≤–∏–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª"""
        current_line = self.get_current_line()
        if current_line:
            path = self.extract_path_from_line(current_line)
            if path and os.path.isfile(path):
                self.open_path_in_system(path)

    @staticmethod
    def open_path_in_system(path):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î —à–ª—è—Ö —É —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        try:
            if sys.platform == "win32":
                os.startfile(path)
            elif sys.platform == "darwin":
                subprocess.run(["open", path])
            else:
                subprocess.run(["xdg-open", path])
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏: {e}")

    def get_current_line(self):
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        try:
            current_pos = self.results_text.index(tk.INSERT)
            line_start = self.results_text.index(f"{current_pos} linestart")
            line_end = self.results_text.index(f"{current_pos} lineend")
            return self.results_text.get(line_start, line_end)
        except:
            return None

    def extract_path_from_line(self, line):
        """–í–∏—Ç—è–≥—É—î —à–ª—è—Ö –∑ —Ä—è–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        # –ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–±: —à—É–∫–∞—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫—É file_paths
        for stored_path, display_name in self.file_paths.items():
            if display_name in line:
                return stored_path
        return None

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def copy_path(self):
        """–ö–æ–ø—ñ—é—î —à–ª—è—Ö –¥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É"""
        current_line = self.get_current_line()
        if current_line:
            path = self.extract_path_from_line(current_line)
            if path:
                self.clipboard_clear()
                self.clipboard_append(path)
                messagebox.showinfo("–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ", f"–®–ª—è—Ö —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ:\n{path}")

    def open_in_explorer_context(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é"""
        self.open_selected_folder()

    def open_file_context(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é"""
        self.open_selected_file()

    def filter_results(self, *args):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º"""
        if not hasattr(self, 'original_results'):
            return

        search_term = self.search_var.get().lower()
        if not search_term:
            self.results_text.delete('1.0', tk.END)
            self.results_text.insert('1.0', self.original_results)
            return

        filtered_lines = []
        for line in self.original_results.split('\n'):
            if search_term in line.lower():
                filtered_lines.append(line)

        self.results_text.delete('1.0', tk.END)
        self.results_text.insert('1.0', '\n'.join(filtered_lines))

    def run_scan(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        path = self.path_var.get()
        if not os.path.isdir(path):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∫–∞–∂—ñ—Ç—å —ñ—Å–Ω—É—é—á—É –ø–∞–ø–∫—É")
            return

        self.update_config()

        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        self.file_paths.clear()

        try:
            # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            progress_window = tk.Toplevel(self)
            progress_window.title("–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
            progress_window.geometry("400x100")
            progress_window.transient(self)
            progress_window.grab_set()

            progress_label = ttk.Label(progress_window, text="–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫...")
            progress_label.pack(pady=10)

            progress_bar = ttk.Progressbar(progress_window, mode='indeterminate')
            progress_bar.pack(fill='x', padx=20, pady=10)
            progress_bar.start()

            self.update()

            # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
            self.scan_results = self.perform_detailed_scan(path)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–≤—ñ–¥
            if self.config_obj.config['output_format'] == 'json':
                output_content = self.generate_json_output()
            elif self.config_obj.config['output_format'] == 'csv':
                output_content = self.generate_csv_output()
            else:
                output_content = self.generate_tree_output()

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            self.original_results = output_content

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            self.results_text.delete('1.0', tk.END)
            self.results_text.insert('1.0', output_content)

            # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            self.notebook.select(1)

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics()

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª
            self.save_results_to_file(output_content)

            progress_window.destroy()

        except Exception as e:
            if 'progress_window' in locals():
                progress_window.destroy()
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

    def perform_detailed_scan(self, root_path):
        """–í–∏–∫–æ–Ω—É—î –¥–µ—Ç–∞–ª—å–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑ –∑–±–∏—Ä–∞–Ω–Ω—è–º –º–µ—Ç–∞–¥–∞–Ω–∏—Ö"""
        results = {
            'root_path': root_path,
            'scan_time': datetime.datetime.now().isoformat(),
            'structure': [],
            'statistics': {
                'total_folders': 0,
                'total_files': 0,
                'total_size': 0,
                'file_types': {},
                'largest_files': [],
                'recent_files': []
            }
        }

        self._scan_directory_recursive(root_path, results, '', 0)
        self._calculate_statistics(results)

        return results

    def _scan_directory_recursive(self, dir_path, results, prefix, depth):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω—É—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é"""
        if self.config_obj.config['max_depth'] > 0 and depth >= self.config_obj.config['max_depth']:
            return

        try:
            entries = os.listdir(dir_path)
        except OSError as e:
            error_item = {
                'name': f"[–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {e.strerror}]",
                'path': dir_path,
                'type': 'error',
                'prefix': prefix,
                'depth': depth
            }
            results['structure'].append(error_item)
            return

        items_to_process = []
        excluded_lower = self.config_obj.config['excluded_folders']
        excluded_ext = self.config_obj.config['excluded_extensions']

        for entry_name in entries:
            entry_path = os.path.join(dir_path, entry_name)

            try:
                entry_stat = os.lstat(entry_path)
                is_dir = stat.S_ISDIR(entry_stat.st_mode)
                is_link = stat.S_ISLNK(entry_stat.st_mode)

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–ª—é—á–µ–Ω—å
                if not self.config_obj.config['show_hidden'] and is_hidden(entry_path):
                    continue
                if not is_dir and not self.config_obj.config['show_files']:
                    continue
                if not is_dir:
                    ext = os.path.splitext(entry_name)[1].lower()
                    if ext in excluded_ext:
                        continue

                # –ó–±–∏—Ä–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
                file_info = {
                    'name': entry_name,
                    'path': entry_path,
                    'type': 'directory' if is_dir else 'file',
                    'is_link': is_link,
                    'size': entry_stat.st_size if not is_dir else 0,
                    'modified': datetime.datetime.fromtimestamp(entry_stat.st_mtime),
                    'permissions': oct(entry_stat.st_mode)[-3:] if hasattr(entry_stat, 'st_mode') else '---',
                    'prefix': prefix,
                    'depth': depth
                }

                if not is_dir:
                    file_info['category'] = FileTypeAnalyzer.get_file_category(entry_path)
                    file_info['extension'] = os.path.splitext(entry_name)[1].lower()

                items_to_process.append(file_info)

            except OSError:
                continue

        # –°–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É –ø–∞–ø–∫–∏, –ø–æ—Ç—ñ–º —Ñ–∞–π–ª–∏
        items_to_process.sort(key=lambda x: (x['type'] != 'directory', x['name'].lower()))

        # –î–æ–¥–∞—î–º–æ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for item in items_to_process:
            results['structure'].append(item)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
            self.file_paths[item['path']] = item['name']

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if item['type'] == 'directory':
                results['statistics']['total_folders'] += 1
            else:
                results['statistics']['total_files'] += 1
                results['statistics']['total_size'] += item['size']

                # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
                results['statistics']['largest_files'].append({
                    'path': item['path'],
                    'size': item['size'],
                    'name': item['name']
                })

                # –î–æ–¥–∞—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤
                results['statistics']['recent_files'].append({
                    'path': item['path'],
                    'modified': item['modified'],
                    'name': item['name']
                })

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–∞–ø–∫–∏
            if item['type'] == 'directory' and item['name'].lower() not in excluded_lower:
                count = len([x for x in items_to_process if x['type'] == item['type']])
                current_index = [x for x in items_to_process if x['type'] == item['type']].index(item)
                is_last = (current_index == count - 1)

                next_prefix = item['prefix'] + ('    ' if is_last else '‚îÇ   ')
                self._scan_directory_recursive(item['path'], results, next_prefix, depth + 1)

    def _calculate_statistics(self, results):
        """–û–±—á–∏—Å–ª—é—î –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –°–æ—Ä—Ç—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à—ñ —Ñ–∞–π–ª–∏
        results['statistics']['largest_files'].sort(key=lambda x: x['size'], reverse=True)
        results['statistics']['largest_files'] = results['statistics']['largest_files'][:50]  # –¢–æ–ø 50

        # –°–æ—Ä—Ç—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª–∏
        results['statistics']['recent_files'].sort(key=lambda x: x['modified'], reverse=True)
        results['statistics']['recent_files'] = results['statistics']['recent_files'][:50]  # –¢–æ–ø 50

        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
        file_types = {}
        for item in results['structure']:
            if item['type'] == 'file':
                category = item.get('category', 'other')
                if category not in file_types:
                    file_types[category] = {'count': 0, 'size': 0}
                file_types[category]['count'] += 1
                file_types[category]['size'] += item['size']

        results['statistics']['file_types'] = file_types

    def generate_tree_output(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–µ—Ä–µ–≤–∞"""
        if not self.scan_results:
            return "–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"

        lines = []
        lines.append(f"üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏: {self.scan_results['root_path']}")
        lines.append(f"üïí –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {self.scan_results['scan_time']}")
        lines.append("")

        current_prefix = ""
        items_by_depth = {}

        # –ì—Ä—É–ø—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ –≥–ª–∏–±–∏–Ω–æ—é —Ç–∞ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
        for item in self.scan_results['structure']:
            depth = item['depth']
            if depth not in items_by_depth:
                items_by_depth[depth] = []
            items_by_depth[depth].append(item)

        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ —Ä—ñ–≤–Ω—è—Ö
        for depth in sorted(items_by_depth.keys()):
            for item in items_by_depth[depth]:
                line = self._format_tree_line(item)
                lines.append(line)

        return '\n'.join(lines)

    def _format_tree_line(self, item):
        """–§–æ—Ä–º–∞—Ç—É—î —Ä—è–¥–æ–∫ –¥–ª—è –¥–µ—Ä–µ–≤–∞"""
        # –ë–∞–∑–æ–≤–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å
        line = item['prefix']

        # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä (–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∞–±–æ –Ω—ñ)
        siblings = [x for x in self.scan_results['structure']
                    if x['depth'] == item['depth'] and x['prefix'] == item['prefix']]
        is_last = siblings[-1] == item if siblings else True
        connector = '‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '

        line += connector

        # –Ü–∫–æ–Ω–∫–∞
        if self.config_obj.config['file_icons']:
            if item['type'] == 'directory':
                line += "üìÅ "
            else:
                line += FileTypeAnalyzer.get_file_icon(item['path']) + " "

        # –Ü–º'—è
        line += item['name']

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —Ñ–∞–π–ª—ñ–≤
        if item['type'] == 'file':
            details = []

            if self.config_obj.config['show_sizes']:
                details.append(f"({human_readable_size(item['size'])})")

            if self.config_obj.config['show_dates']:
                details.append(f"[{item['modified'].strftime('%Y-%m-%d %H:%M')}]")

            if self.config_obj.config['show_permissions']:
                details.append(f"<{item['permissions']}>")

            if details:
                line += " " + " ".join(details)

        return line

    def generate_json_output(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON"""
        if not self.scan_results:
            return "–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –∑ —Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏
        json_data = json.loads(json.dumps(self.scan_results, default=str, ensure_ascii=False))
        return json.dumps(json_data, indent=2, ensure_ascii=False)

    def generate_csv_output(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV"""
        if not self.scan_results:
            return "–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"

        lines = []
        lines.append("–¢–∏–ø,–Ü–º'—è,–®–ª—è—Ö,–†–æ–∑–º—ñ—Ä (–±–∞–π—Ç–∏),–†–æ–∑–º—ñ—Ä (—á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π),–î–∞—Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó,–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É,–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")

        for item in self.scan_results['structure']:
            if item['type'] == 'error':
                continue

            row = [
                item['type'],
                f'"{item["name"]}"',  # –ë–µ—Ä–µ–º–æ –≤ –ª–∞–ø–∫–∏ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∫–æ–º —É –Ω–∞–∑–≤—ñ
                f'"{item["path"]}"',
                str(item.get('size', 0)),
                f'"{human_readable_size(item.get("size", 0))}"',
                item.get('modified', '').strftime('%Y-%m-%d %H:%M:%S') if item.get('modified') else '',
                item.get('permissions', ''),
                item.get('category', '')
            ]
            lines.append(','.join(row))

        return '\n'.join(lines)

    def update_statistics(self):
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.scan_results:
            return

        stats = self.scan_results['statistics']

        self.stats_label.config(
            text=f"üìä –ü–∞–ø–æ–∫: {stats['total_folders']} | "
                 f"–§–∞–π–ª—ñ–≤: {stats['total_files']} | "
                 f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {human_readable_size(stats['total_size'])}")

    def save_results_to_file(self, content):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–∞–π–ª"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        format_ext = {
            'tree': 'txt',
            'json': 'json',
            'csv': 'csv'
        }

        ext = format_ext.get(self.config_obj.config['output_format'], 'txt')
        output_path = os.path.join(SCRIPT_DIR, f"scan_results_{timestamp}.{ext}")

        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            messagebox.showinfo("–ó–±–µ—Ä–µ–∂–µ–Ω–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É:\n{output_path}")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª:\n{e}")

    def export_json(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É JSON"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        filepath = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )

        if filepath:
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(self.scan_results, f, indent=2, ensure_ascii=False, default=str)
                messagebox.showinfo("–ï–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É JSON:\n{filepath}")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")

    def export_csv(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É CSV"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        filepath = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )

        if filepath:
            try:
                csv_content = self.generate_csv_output()
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(csv_content)
                messagebox.showinfo("–ï–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É CSV:\n{filepath}")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")

    def export_html(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É HTML –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        filepath = filedialog.asksaveasfilename(
            defaultextension=".html",
            filetypes=[("HTML files", "*.html"), ("All files", "*.*")]
        )

        if filepath:
            try:
                html_content = self.generate_html_output()
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                messagebox.showinfo("–ï–∫—Å–ø–æ—Ä—Ç", f"–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π HTML —Å—Ç–≤–æ—Ä–µ–Ω–æ:\n{filepath}")

                # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
                if messagebox.askyesno("–í—ñ–¥–∫—Ä–∏—Ç–∏", "–í—ñ–¥–∫—Ä–∏—Ç–∏ HTML —Ñ–∞–π–ª —É –±—Ä–∞—É–∑–µ—Ä—ñ?"):
                    webbrowser.open(f"file://{os.path.abspath(filepath)}")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")

    def generate_html_output(self):
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π HTML –∑ JavaScript –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é"""
        html_template = '''<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏: {root_path}</title>
    <style>
        body {{
            font-family: 'Consolas', 'Monaco', monospace;
            margin: 20px;
            background: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            border-bottom: 2px solid #eee;
            padding-bottom: 15px;
            margin-bottom: 20px;
        }}
        .search-box {{
            margin: 15px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 5px;
        }}
        .search-box input {{
            width: 300px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }}
        .tree-item {{
            margin: 2px 0;
            padding: 3px;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.2s;
        }}
        .tree-item:hover {{
            background-color: #e3f2fd;
        }}
        .tree-item.selected {{
            background-color: #bbdefb;
        }}
        .file-item {{ color: #2e7d32; }}
        .folder-item {{ color: #1565c0; font-weight: bold; }}
        .error-item {{ color: #d32f2f; }}
        .file-details {{
            font-size: 0.9em;
            color: #666;
            margin-left: 10px;
        }}
        .statistics {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }}
        .path-breadcrumb {{
            background: #e3f2fd;
            padding: 8px;
            border-radius: 4px;
            margin: 10px 0;
            font-family: monospace;
            word-break: break-all;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏</h1>
            <div class="path-breadcrumb">
                <strong>–®–ª—è—Ö:</strong> {root_path}
            </div>
            <div><strong>üïí –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:</strong> {scan_time}</div>
        </div>

        <div class="search-box">
            üîç <input type="text" id="searchInput" placeholder="–ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø–∞–ø–æ–∫..." onkeyup="filterItems()">
            <button onclick="clearSearch()">–û—á–∏—Å—Ç–∏—Ç–∏</button>
        </div>

        <div class="statistics">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <p><strong>üìÅ –ü–∞–ø–æ–∫:</strong> {total_folders}</p>
            <p><strong>üìÑ –§–∞–π–ª—ñ–≤:</strong> {total_files}</p>
            <p><strong>üíæ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:</strong> {total_size}</p>
        </div>

        <div id="treeContent">
            {tree_content}
        </div>
    </div>

    <script>
        const allItems = document.querySelectorAll('.tree-item');

        function filterItems() {{
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            allItems.forEach(item => {{
                const text = item.textContent.toLowerCase();
                if (searchTerm === '' || text.includes(searchTerm)) {{
                    item.style.display = 'block';
                }} else {{
                    item.style.display = 'none';
                }}
            }});
        }}

        function clearSearch() {{
            document.getElementById('searchInput').value = '';
            filterItems();
        }}

        // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
        allItems.forEach(item => {{
            item.addEventListener('click', function() {{
                allItems.forEach(i => i.classList.remove('selected'));
                this.classList.add('selected');
            }});
        }});

        // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –ø—Ä–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–º—É –∫–ª—ñ–∫—É
        allItems.forEach(item => {{
            item.addEventListener('dblclick', function() {{
                const pathElement = this.getAttribute('data-path');
                if (pathElement) {{
                    navigator.clipboard.writeText(pathElement).then(() => {{
                        alert('–®–ª—è—Ö —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: ' + pathElement);
                    }});
                }}
            }});
        }});
    </script>
</body>
</html>'''

        # –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞
        tree_lines = []
        for item in self.scan_results['structure']:
            css_class = f"{item['type']}-item"

            # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –∑ –¥–µ—Ç–∞–ª—è–º–∏
            details = []
            if item['type'] == 'file':
                if self.config_obj.config['show_sizes']:
                    details.append(f"({human_readable_size(item['size'])})")
                if self.config_obj.config['show_dates']:
                    details.append(f"[{item['modified'].strftime('%Y-%m-%d %H:%M')}]")

            detail_str = " ".join(details)

            # –Ü–∫–æ–Ω–∫–∞
            icon = ""
            if self.config_obj.config['file_icons']:
                icon = FileTypeAnalyzer.get_file_icon(item['path'], item['type'] == 'directory')

            tree_line = f'''<div class="tree-item {css_class}" data-path="{item['path']}">
                {item['prefix']}{'‚îî‚îÄ‚îÄ ' if item.get('is_last', False) else '‚îú‚îÄ‚îÄ '}{icon} {item['name']}
                <span class="file-details">{detail_str}</span>
            </div>'''

            tree_lines.append(tree_line)

        stats = self.scan_results['statistics']

        return html_template.format(
            root_path=self.scan_results['root_path'],
            scan_time=self.scan_results['scan_time'],
            total_folders=stats['total_folders'],
            total_files=stats['total_files'],
            total_size=human_readable_size(stats['total_size']),
            tree_content='\n'.join(tree_lines)
        )

    def find_duplicates(self):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        self.analytics_text.delete('1.0', tk.END)
        self.analytics_text.insert('1.0', "üîç –ü–æ—à—É–∫ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —Ñ–∞–π–ª—ñ–≤...\n\n")
        self.update()

        # –ì—Ä—É–ø—É—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º —Ç–∞ —ñ–º–µ–Ω–µ–º
        files_by_size = {}
        files_by_name = {}

        for item in self.scan_results['structure']:
            if item['type'] == 'file':
                size = item['size']
                name = item['name'].lower()

                if size not in files_by_size:
                    files_by_size[size] = []
                files_by_size[size].append(item)

                if name not in files_by_name:
                    files_by_name[name] = []
                files_by_name[name].append(item)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
        duplicates_text = "üîç –î–£–ë–õ–Ü–ö–ê–¢–ò –ó–ê –†–û–ó–ú–Ü–†–û–ú:\n" + "=" * 50 + "\n\n"
        size_duplicates_found = False

        for size, files in files_by_size.items():
            if len(files) > 1 and size > 0:  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏
                size_duplicates_found = True
                duplicates_text += f"üìè –†–æ–∑–º—ñ—Ä: {human_readable_size(size)} ({len(files)} —Ñ–∞–π–ª—ñ–≤)\n"
                for file_item in files:
                    duplicates_text += f"   üìÑ {file_item['path']}\n"
                duplicates_text += "\n"

        if not size_duplicates_found:
            duplicates_text += "‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n"

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑–∞ —ñ–º–µ–Ω–µ–º
        duplicates_text += "\nüîç –î–£–ë–õ–Ü–ö–ê–¢–ò –ó–ê –Ü–ú–ï–ù–ï–ú:\n" + "=" * 50 + "\n\n"
        name_duplicates_found = False

        for name, files in files_by_name.items():
            if len(files) > 1:
                name_duplicates_found = True
                duplicates_text += f"üìõ –Ü–º'—è: {name} ({len(files)} —Ñ–∞–π–ª—ñ–≤)\n"
                for file_item in files:
                    duplicates_text += f"   üìÑ {file_item['path']} ({human_readable_size(file_item['size'])})\n"
                duplicates_text += "\n"

        if not name_duplicates_found:
            duplicates_text += "‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ —ñ–º–µ–Ω–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"

        self.analytics_text.delete('1.0', tk.END)
        self.analytics_text.insert('1.0', duplicates_text)
        self.notebook.select(2)  # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏

    def analyze_file_sizes(self):
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ä–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ñ–∞–π–ª—ñ–≤"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        stats = self.scan_results['statistics']

        analysis_text = "üìä –ê–ù–ê–õ–Ü–ó –†–û–ó–ú–Ü–†–Ü–í –§–ê–ô–õ–Ü–í\n" + "=" * 50 + "\n\n"

        # –¢–æ–ø –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
        analysis_text += "üîù –¢–û–ü-20 –ù–ê–ô–ë–Ü–õ–¨–®–ò–• –§–ê–ô–õ–Ü–í:\n" + "-" * 30 + "\n"
        for i, file_info in enumerate(stats['largest_files'][:20], 1):
            analysis_text += f"{i:2d}. {human_readable_size(file_info['size']):>10} - {file_info['path']}\n"

        # –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
        analysis_text += f"\nüìè –†–û–ó–ü–û–î–Ü–õ –ó–ê –†–û–ó–ú–Ü–†–ê–ú–ò:\n" + "-" * 30 + "\n"

        size_ranges = {
            '–î—É–∂–µ –º–∞–ª—ñ (< 1 –ö–ë)': (0, 1024),
            '–ú–∞–ª—ñ (1 –ö–ë - 1 –ú–ë)': (1024, 1024 * 1024),
            '–°–µ—Ä–µ–¥–Ω—ñ (1 –ú–ë - 100 –ú–ë)': (1024 * 1024, 100 * 1024 * 1024),
            '–í–µ–ª–∏–∫—ñ (100 –ú–ë - 1 –ì–ë)': (100 * 1024 * 1024, 1024 * 1024 * 1024),
            '–î—É–∂–µ –≤–µ–ª–∏–∫—ñ (> 1 –ì–ë)': (1024 * 1024 * 1024, float('inf'))
        }

        for range_name, (min_size, max_size) in size_ranges.items():
            count = sum(1 for item in self.scan_results['structure']
                        if item['type'] == 'file' and min_size <= item['size'] < max_size)
            total_size = sum(item['size'] for item in self.scan_results['structure']
                             if item['type'] == 'file' and min_size <= item['size'] < max_size)
            analysis_text += f"{range_name:20} : {count:6d} —Ñ–∞–π–ª—ñ–≤ ({human_readable_size(total_size)})\n"

        self.analytics_text.delete('1.0', tk.END)
        self.analytics_text.insert('1.0', analysis_text)
        self.notebook.select(2)

    def file_type_statistics(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–Ü–í –§–ê–ô–õ–Ü–í\n" + "=" * 50 + "\n\n"

        file_types = self.scan_results['statistics']['file_types']

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ñ–∞–π–ª—ñ–≤
        sorted_types = sorted(file_types.items(), key=lambda x: x[1]['count'], reverse=True)

        stats_text += f"{'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è':15} {'–§–∞–π–ª—ñ–≤':>8} {'–†–æ–∑–º—ñ—Ä':>12} {'–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä':>15}\n"
        stats_text += "-" * 55 + "\n"

        for category, data in sorted_types:
            avg_size = data['size'] / data['count'] if data['count'] > 0 else 0
            icon = {
                'code': 'üíª', 'image': 'üñºÔ∏è', 'video': 'üé¨', 'audio': 'üéµ',
                'document': 'üìÑ', 'archive': 'üì¶', 'data': 'üìä', 'other': '‚ùì'
            }.get(category, '‚ùì')

            stats_text += f"{icon} {category:12} {data['count']:>8} {human_readable_size(data['size']):>12} {human_readable_size(avg_size):>15}\n"

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        total_files = sum(data['count'] for data in file_types.values())
        total_size = sum(data['size'] for data in file_types.values())

        stats_text += "\n" + "=" * 50 + "\n"
        stats_text += f"üìÑ –ó–∞–≥–∞–ª–æ–º —Ñ–∞–π–ª—ñ–≤: {total_files}\n"
        stats_text += f"üíæ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {human_readable_size(total_size)}\n"

        if total_files > 0:
            stats_text += f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {human_readable_size(total_size / total_files)}\n"

        self.analytics_text.delete('1.0', tk.END)
        self.analytics_text.insert('1.0', stats_text)
        self.notebook.select(2)

    def show_largest_files(self):
        """–ü–æ–∫–∞–∑—É—î –Ω–∞–π–±—ñ–ª—å—à—ñ —Ñ–∞–π–ª–∏"""
        self.analyze_file_sizes()

    def show_file_types(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤"""
        self.file_type_statistics()

    def show_recent_files(self):
        """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—å–æ –∑–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        recent_text = "üìÖ –û–°–¢–ê–ù–ù–Ü –ó–ú–Ü–ù–ò –§–ê–ô–õ–Ü–í\n" + "=" * 50 + "\n\n"
        recent_text += "üîù –¢–û–ü-30 –û–°–¢–ê–ù–ù–¨–û –ó–ú–Ü–ù–ï–ù–ò–• –§–ê–ô–õ–Ü–í:\n" + "-" * 35 + "\n"

        for i, file_info in enumerate(self.scan_results['statistics']['recent_files'][:30], 1):
            date_str = file_info['modified'].strftime('%Y-%m-%d %H:%M:%S')
            recent_text += f"{i:2d}. {date_str} - {file_info['path']}\n"

        self.analytics_text.delete('1.0', tk.END)
        self.analytics_text.insert('1.0', recent_text)
        self.notebook.select(2)


def human_readable_size(size_bytes):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ä–æ–∑–º—ñ—Ä —É –±–∞–π—Ç–∞—Ö —É —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    if size_bytes is None or size_bytes < 0:
        return "–ù/–î"
    if size_bytes == 0:
        return "0 –ë"

    units = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë']
    i = 0
    while size_bytes >= 1024 and i < len(units) - 1:
        size_bytes /= 1024.0
        i += 1

    return f"{size_bytes:.1f} {units[i]}" if size_bytes % 1 != 0 else f"{int(size_bytes)} {units[i]}"


def colorize(item_text, is_dir, full_item_name=None):
    """–î–æ–¥–∞—î –∫–æ–ª—å–æ—Ä–∏ –¥–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É"""
    if is_dir:
        return Fore.BLUE + item_text + Style.RESET_ALL
    else:
        check_name = full_item_name if full_item_name else item_text
        category = FileTypeAnalyzer.get_file_category(check_name)

        colors = {
            'code': Fore.YELLOW,
            'image': Fore.MAGENTA,
            'video': Fore.RED,
            'audio': Fore.CYAN,
            'document': Fore.GREEN,
            'archive': Fore.LIGHTBLUE_EX,
            'data': Fore.LIGHTGREEN_EX
        }

        color = colors.get(category, Fore.WHITE)
        return color + item_text + Style.RESET_ALL


def is_hidden(filepath):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ—é"""
    try:
        if os.name == 'posix':
            return os.path.basename(filepath).startswith('.')
        elif os.name == 'nt':
            attrs = os.stat(filepath).st_file_attributes
            return attrs & (stat.FILE_ATTRIBUTE_HIDDEN | stat.FILE_ATTRIBUTE_SYSTEM)
    except OSError:
        return False
    return False


def calculate_total_size(root_path):
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–æ–≤–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–∞–ø–∫–∏ —Ç–∞ —ó—ó –≤–º—ñ—Å—Ç—É, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ.
    –Ü–≥–Ω–æ—Ä—É—î –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª—ñ–≤.
    """
    total_size = 0
    try:
        for entry in os.scandir(root_path):
            try:
                if entry.is_dir(follow_symlinks=False):
                    total_size += calculate_total_size(entry.path)
                elif entry.is_file(follow_symlinks=False):
                    total_size += entry.stat(follow_symlinks=False).st_size
            except OSError:
                continue
    except OSError:
        return 0

    return total_size


class QuickAccessPanel:
    """–ü–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫"""

    def __init__(self, parent_app):
        self.parent_app = parent_app

    def get_common_folders(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É"""
        common_folders = []

        # –î–æ–º–∞—à–Ω—è –ø–∞–ø–∫–∞
        home_dir = os.path.expanduser("~")
        if os.path.exists(home_dir):
            common_folders.append(("üè† –î–æ–º–∞—à–Ω—è –ø–∞–ø–∫–∞", home_dir))

        # –†–æ–±–æ—á–∏–π —Å—Ç—ñ–ª
        desktop_paths = [
            os.path.join(home_dir, "Desktop"),
            os.path.join(home_dir, "–†–æ–±–æ—á–∏–π —Å—Ç–æ–ª"),
            os.path.join(home_dir, "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
        ]
        for desktop_path in desktop_paths:
            if os.path.exists(desktop_path):
                common_folders.append(("üñ•Ô∏è –†–æ–±–æ—á–∏–π —Å—Ç—ñ–ª", desktop_path))
                break

        # –î–æ–∫—É–º–µ–Ω—Ç–∏
        documents_paths = [
            os.path.join(home_dir, "Documents"),
            os.path.join(home_dir, "–î–æ–∫—É–º–µ–Ω—Ç–∏"),
            os.path.join(home_dir, "–î–æ–∫—É–º–µ–Ω—Ç—ã")
        ]
        for doc_path in documents_paths:
            if os.path.exists(doc_path):
                common_folders.append(("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏", doc_path))
                break

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        downloads_paths = [
            os.path.join(home_dir, "Downloads"),
            os.path.join(home_dir, "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"),
            os.path.join(home_dir, "–ó–∞–≥—Ä—É–∑–∫–∏")
        ]
        for download_path in downloads_paths:
            if os.path.exists(download_path):
                common_folders.append(("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", download_path))
                break

        # –ü—Ä–æ–≥—Ä–∞–º–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è Windows)
        if os.name == 'nt':
            program_paths = [
                "C:\\Program Files",
                "C:\\Program Files (x86)"
            ]
            for prog_path in program_paths:
                if os.path.exists(prog_path):
                    common_folders.append((f"‚öôÔ∏è {os.path.basename(prog_path)}", prog_path))

        # –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —Å–∫—Ä–∏–ø—Ç–∞
        common_folders.append(("üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏", SCRIPT_DIR))

        return common_folders


class AdvancedFilterDialog:
    """–†–æ–∑—à–∏—Ä–µ–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""

    def __init__(self, parent, current_config):
        self.parent = parent
        self.result = None

        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üîç –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏")
        self.dialog.geometry("500x600")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        self.min_size = tk.StringVar(value="0")
        self.max_size = tk.StringVar(value="")
        self.date_from = tk.StringVar()
        self.date_to = tk.StringVar()
        self.name_pattern = tk.StringVar()
        self.include_extensions = tk.StringVar()
        self.exclude_extensions = tk.StringVar(value=",".join(current_config['excluded_extensions']))

        self.create_filter_widgets()

        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (600 // 2)
        self.dialog.geometry(f"500x600+{x}+{y}")

    def create_filter_widgets(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
        main_frame = ttk.Frame(self.dialog)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
        size_frame = ttk.LabelFrame(main_frame, text="üìè –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º")
        size_frame.pack(fill='x', pady=5)

        ttk.Label(size_frame, text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä (–±–∞–π—Ç–∏):").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        ttk.Entry(size_frame, textvariable=self.min_size, width=20).grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(size_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä (–±–∞–π—Ç–∏):").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        ttk.Entry(size_frame, textvariable=self.max_size, width=20).grid(row=1, column=1, padx=5, pady=5)

        # –ü—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É
        hint_frame = ttk.Frame(size_frame)
        hint_frame.grid(row=2, column=0, columnspan=2, sticky='w', padx=5, pady=5)
        ttk.Label(hint_frame, text="üí° –ü—ñ–¥–∫–∞–∑–∫–∞: 1 –ö–ë = 1024, 1 –ú–ë = 1048576, 1 –ì–ë = 1073741824",
                  font=('TkDefaultFont', 8)).pack()

        # –®–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
        quick_size_frame = ttk.Frame(size_frame)
        quick_size_frame.grid(row=3, column=0, columnspan=2, pady=5)

        ttk.Button(quick_size_frame, text="> 1 –ú–ë",
                   command=lambda: self.min_size.set("1048576")).pack(side='left', padx=2)
        ttk.Button(quick_size_frame, text="> 10 –ú–ë",
                   command=lambda: self.min_size.set("10485760")).pack(side='left', padx=2)
        ttk.Button(quick_size_frame, text="> 100 –ú–ë",
                   command=lambda: self.min_size.set("104857600")).pack(side='left', padx=2)

        # –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ –¥–∞—Ç–æ—é
        date_frame = ttk.LabelFrame(main_frame, text="üìÖ –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ –¥–∞—Ç–æ—é –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
        date_frame.pack(fill='x', pady=5)

        ttk.Label(date_frame, text="–í—ñ–¥ –¥–∞—Ç–∏ (YYYY-MM-DD):").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        ttk.Entry(date_frame, textvariable=self.date_from, width=20).grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(date_frame, text="–î–æ –¥–∞—Ç–∏ (YYYY-MM-DD):").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        ttk.Entry(date_frame, textvariable=self.date_to, width=20).grid(row=1, column=1, padx=5, pady=5)

        # –®–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞—Ç
        quick_date_frame = ttk.Frame(date_frame)
        quick_date_frame.grid(row=2, column=0, columnspan=2, pady=5)

        today = datetime.datetime.now()
        week_ago = today - datetime.timedelta(days=7)
        month_ago = today - datetime.timedelta(days=30)

        ttk.Button(quick_date_frame, text="–û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å",
                   command=lambda: self.date_from.set(week_ago.strftime("%Y-%m-%d"))).pack(side='left', padx=2)
        ttk.Button(quick_date_frame, text="–û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å",
                   command=lambda: self.date_from.set(month_ago.strftime("%Y-%m-%d"))).pack(side='left', padx=2)

        # –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —ñ–º–µ–Ω–µ–º
        name_frame = ttk.LabelFrame(main_frame, text="üìù –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —ñ–º–µ–Ω–µ–º")
        name_frame.pack(fill='x', pady=5)

        ttk.Label(name_frame, text="–®–∞–±–ª–æ–Ω —ñ–º–µ–Ω—ñ (* = –±—É–¥—å-—è–∫—ñ —Å–∏–º–≤–æ–ª–∏):").grid(row=0, column=0, sticky='w', padx=5,
                                                                                pady=5)
        ttk.Entry(name_frame, textvariable=self.name_pattern, width=30).grid(row=0, column=1, padx=5, pady=5)

        hint_name = ttk.Label(name_frame, text="üí° –ü—Ä–∏–∫–ª–∞–¥–∏: *.txt, backup*, *config*",
                              font=('TkDefaultFont', 8))
        hint_name.grid(row=1, column=0, columnspan=2, sticky='w', padx=5)

        # –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏
        ext_frame = ttk.LabelFrame(main_frame, text="üìé –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏")
        ext_frame.pack(fill='x', pady=5)

        ttk.Label(ext_frame, text="–í–∫–ª—é—á–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        ttk.Entry(ext_frame, textvariable=self.include_extensions, width=30).grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(ext_frame, text="–í–∏–∫–ª—é—á–∏—Ç–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        ttk.Entry(ext_frame, textvariable=self.exclude_extensions, width=30).grid(row=1, column=1, padx=5, pady=5)

        # –®–≤–∏–¥–∫—ñ –Ω–∞–±–æ—Ä–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω—å
        quick_ext_frame = ttk.Frame(ext_frame)
        quick_ext_frame.grid(row=2, column=0, columnspan=2, pady=5)

        ttk.Button(quick_ext_frame, text="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                   command=lambda: self.include_extensions.set(".jpg,.jpeg,.png,.gif,.bmp,.svg")).pack(side='left',
                                                                                                       padx=2)
        ttk.Button(quick_ext_frame, text="–î–æ–∫—É–º–µ–Ω—Ç–∏",
                   command=lambda: self.include_extensions.set(".pdf,.doc,.docx,.txt,.md,.rtf")).pack(side='left',
                                                                                                      padx=2)
        ttk.Button(quick_ext_frame, text="–ö–æ–¥",
                   command=lambda: self.include_extensions.set(".py,.js,.html,.css,.cpp,.java")).pack(side='left',
                                                                                                      padx=2)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x', pady=10)

        ttk.Button(button_frame, text="‚úÖ –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏", command=self.apply_filters).pack(side='left', padx=5)
        ttk.Button(button_frame, text="üîÑ –°–∫–∏–Ω—É—Ç–∏", command=self.reset_filters).pack(side='left', padx=5)
        ttk.Button(button_frame, text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", command=self.cancel).pack(side='right', padx=5)

    def apply_filters(self):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏"""
        try:
            filters = {
                'min_size': int(self.min_size.get() or 0),
                'max_size': int(self.max_size.get()) if self.max_size.get() else None,
                'date_from': datetime.datetime.strptime(self.date_from.get(),
                                                        "%Y-%m-%d") if self.date_from.get() else None,
                'date_to': datetime.datetime.strptime(self.date_to.get(), "%Y-%m-%d") if self.date_to.get() else None,
                'name_pattern': self.name_pattern.get() if self.name_pattern.get() else None,
                'include_extensions': [ext.strip().lower() for ext in self.include_extensions.get().split(',') if
                                       ext.strip()],
                'exclude_extensions': [ext.strip().lower() for ext in self.exclude_extensions.get().split(',') if
                                       ext.strip()]
            }
            self.result = filters
            self.dialog.destroy()
        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É —Ñ—ñ–ª—å—Ç—Ä–∞—Ö: {e}")

    def reset_filters(self):
        """–°–∫–∏–¥–∞—î –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏"""
        self.min_size.set("0")
        self.max_size.set("")
        self.date_from.set("")
        self.date_to.set("")
        self.name_pattern.set("")
        self.include_extensions.set("")
        self.exclude_extensions.set("")

    def cancel(self):
        """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥"""
        self.dialog.destroy()


# –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—É App
class EnhancedApp(App):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏"""

    def __init__(self, config):
        super().__init__(config)
        self.current_filters = None
        self.add_quick_access_panel()
        self.add_advanced_features()

    def add_quick_access_panel(self):
        """–î–æ–¥–∞—î –ø–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É"""
        quick_panel = ttk.LabelFrame(self.notebook.winfo_children()[0], text="‚ö° –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø")
        quick_panel.pack(fill='x', padx=5, pady=5)

        self.quick_access = QuickAccessPanel(self)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
        button_frame = ttk.Frame(quick_panel)
        button_frame.pack(fill='x', padx=5, pady=5)

        common_folders = self.quick_access.get_common_folders()
        for i, (name, path) in enumerate(common_folders):
            if i % 3 == 0 and i > 0:
                button_frame = ttk.Frame(quick_panel)
                button_frame.pack(fill='x', padx=5, pady=2)

            ttk.Button(button_frame, text=name,
                       command=lambda p=path: self.path_var.set(p)).pack(side='left', padx=2, pady=2)

    def add_advanced_features(self):
        """–î–æ–¥–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"""
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        settings_frame = self.notebook.winfo_children()[0]
        advanced_frame = ttk.Frame(settings_frame)
        advanced_frame.pack(fill='x', padx=5, pady=5)

        ttk.Button(advanced_frame, text="üîç –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏",
                   command=self.open_advanced_filters).pack(side='left', padx=5)
        ttk.Button(advanced_frame, text="üìä –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø–∞–ø–∫–∏",
                   command=self.compare_folders).pack(side='left', padx=5)
        ttk.Button(advanced_frame, text="üîÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç",
                   command=self.generate_report).pack(side='left', padx=5)

    def open_advanced_filters(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
        dialog = AdvancedFilterDialog(self, self.config_obj.config)
        self.wait_window(dialog.dialog)

        if dialog.result:
            self.current_filters = dialog.result
            messagebox.showinfo("–§—ñ–ª—å—Ç—Ä–∏", "–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ! –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")

    def compare_folders(self):
        """–ü–æ—Ä—ñ–≤–Ω—é—î –¥–≤—ñ –ø–∞–ø–∫–∏"""
        folder1 = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –ø–∞–ø–∫—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        if not folder1:
            return

        folder2 = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥—É –ø–∞–ø–∫—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        if not folder2:
            return

        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        self.perform_folder_comparison(folder1, folder2)

    def perform_folder_comparison(self, folder1, folder2):
        """–í–∏–∫–æ–Ω—É—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–≤–æ—Ö –ø–∞–ø–æ–∫"""
        comparison_text = f"üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–ê–ü–û–ö\n{'=' * 50}\n\n"
        comparison_text += f"üìÅ –ü–∞–ø–∫–∞ 1: {folder1}\n"
        comparison_text += f"üìÅ –ü–∞–ø–∫–∞ 2: {folder2}\n\n"

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª—ñ–≤ –∑ –æ–±–æ—Ö –ø–∞–ø–æ–∫
            files1 = set()
            files2 = set()

            for root, dirs, files in os.walk(folder1):
                for file in files:
                    rel_path = os.path.relpath(os.path.join(root, file), folder1)
                    files1.add(rel_path)

            for root, dirs, files in os.walk(folder2):
                for file in files:
                    rel_path = os.path.relpath(os.path.join(root, file), folder2)
                    files2.add(rel_path)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ
            only_in_1 = files1 - files2
            only_in_2 = files2 - files1
            common_files = files1 & files2

            comparison_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            comparison_text += f"   –§–∞–π–ª—ñ–≤ —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–ø—Ü—ñ 1: {len(only_in_1)}\n"
            comparison_text += f"   –§–∞–π–ª—ñ–≤ —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–ø—Ü—ñ 2: {len(only_in_2)}\n"
            comparison_text += f"   –°–ø—ñ–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {len(common_files)}\n\n"

            if only_in_1:
                comparison_text += f"üìÅ –§–∞–π–ª–∏ —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–ø—Ü—ñ 1 ({len(only_in_1)}):\n{'-' * 30}\n"
                for file in sorted(list(only_in_1)[:50]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 50
                    comparison_text += f"   {file}\n"
                if len(only_in_1) > 50:
                    comparison_text += f"   ... —Ç–∞ —â–µ {len(only_in_1) - 50} —Ñ–∞–π–ª—ñ–≤\n"
                comparison_text += "\n"

            if only_in_2:
                comparison_text += f"üìÅ –§–∞–π–ª–∏ —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–ø—Ü—ñ 2 ({len(only_in_2)}):\n{'-' * 30}\n"
                for file in sorted(list(only_in_2)[:50]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 50
                    comparison_text += f"   {file}\n"
                if len(only_in_2) > 50:
                    comparison_text += f"   ... —Ç–∞ —â–µ {len(only_in_2) - 50} —Ñ–∞–π–ª—ñ–≤\n"
                comparison_text += "\n"

        except Exception as e:
            comparison_text += f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}\n"

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.analytics_text.delete('1.0', tk.END)
        self.analytics_text.insert('1.0', comparison_text)
        self.notebook.select(2)

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç"""
        if not self.scan_results:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        report = self.create_detailed_report()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = os.path.join(SCRIPT_DIR, f"detailed_report_{timestamp}.txt")

        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report)

            messagebox.showinfo("–ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ", f"–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n{report_path}")

            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–≤—ñ—Ç
            if messagebox.askyesno("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–≤—ñ—Ç", "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–≤—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É?"):
                self.open_path_in_system(report_path)

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç: {e}")

    def create_detailed_report(self):
        """–°—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        stats = self.scan_results['statistics']

        report = f"""
üîç –î–ï–¢–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –°–ö–ê–ù–£–í–ê–ù–ù–Ø –ü–ê–ü–ö–ò
{'=' * 60}

üìä –ó–ê–ì–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:
{'=' * 30}
üéØ –¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞: {self.scan_results['root_path']}
üïí –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {self.scan_results['scan_time']}
üìÅ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–ø–æ–∫: {stats['total_folders']}
üìÑ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤: {stats['total_files']}
üíæ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {human_readable_size(stats['total_size'])}

‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–ò –°–ö–ê–ù–£–í–ê–ù–ù–Ø:
{'=' * 30}
üîç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥–ª–∏–±–∏–Ω–∞: {self.config_obj.config['max_depth'] or '–ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}
üëÅÔ∏è –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ: {'–¢–∞–∫' if self.config_obj.config['show_hidden'] else '–ù—ñ'}
üìÑ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏: {'–¢–∞–∫' if self.config_obj.config['show_files'] else '–ù—ñ'}
üé® –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —ñ–∫–æ–Ω–∫–∏: {'–¢–∞–∫' if self.config_obj.config['file_icons'] else '–ù—ñ'}
üö´ –í–∏–∫–ª—é—á–µ–Ω—ñ –ø–∞–ø–∫–∏: {', '.join(self.config_obj.config['excluded_folders']) or '–ù–µ–º–∞—î'}
üö´ –í–∏–∫–ª—é—á–µ–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {', '.join(self.config_obj.config['excluded_extensions']) or '–ù–µ–º–∞—î'}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–Ü–í –§–ê–ô–õ–Ü–í:
{'=' * 30}
"""

        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤
        for category, data in sorted(stats['file_types'].items(), key=lambda x: x[1]['count'], reverse=True):
            percentage = (data['count'] / stats['total_files'] * 100) if stats['total_files'] > 0 else 0
            report += f"üìÅ {category.upper():12} : {data['count']:6} —Ñ–∞–π–ª—ñ–≤ ({percentage:5.1f}%) - {human_readable_size(data['size'])}\n"

        # –î–æ–¥–∞—î–º–æ —Ç–æ–ø –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
        report += f"\nüîù –¢–û–ü-20 –ù–ê–ô–ë–Ü–õ–¨–®–ò–• –§–ê–ô–õ–Ü–í:\n{'=' * 30}\n"
        for i, file_info in enumerate(stats['largest_files'][:20], 1):
            report += f"{i:2d}. {human_readable_size(file_info['size']):>10} - {file_info['path']}\n"

        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª–∏
        report += f"\nüìÖ –û–°–¢–ê–ù–ù–Ü 20 –ó–ú–Ü–ù–ï–ù–ò–• –§–ê–ô–õ–Ü–í:\n{'=' * 30}\n"
        for i, file_info in enumerate(stats['recent_files'][:20], 1):
            date_str = file_info['modified'].strftime('%Y-%m-%d %H:%M:%S')
            report += f"{i:2d}. {date_str} - {file_info['path']}\n"

        return report


if __name__ == "__main__":
    config = TreeConfig()
    app = EnhancedApp(config)
    app.mainloop()