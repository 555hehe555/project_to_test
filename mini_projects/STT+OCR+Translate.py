import sys
import subprocess
import importlib
import platform
import os
import urllib.request
import zipfile
import shutil
from pathlib import Path


class AutoInstaller:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""

    def __init__(self):
        self.system = platform.system()
        self.app_dir = Path(__file__).parent if hasattr(Path(__file__), 'parent') else Path.cwd()
        self.tesseract_dir = self.app_dir / "tesseract"
        self.tesseract_exe = self.tesseract_dir / "tesseract.exe"

    def check_python_version(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python"""
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 7):
            print(f"‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.7 –∞–±–æ –Ω–æ–≤—ñ—à–∏–π. –í–∞—à–∞ –≤–µ—Ä—Å—ñ—è: {sys.version}")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
            sys.exit(1)
        print(f"‚úÖ Python –≤–µ—Ä—Å—ñ—è: {sys.version}")

    def install_pip_package(self, package_name, import_name=None):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python –ø–∞–∫–µ—Ç—É"""
        if import_name is None:
            import_name = package_name.split('[')[0]  # –¥–ª—è –ø–∞–∫–µ—Ç—ñ–≤ —Ç–∏–ø—É package[extra]

        try:
            importlib.import_module(import_name)
            print(f"‚úÖ {package_name} –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except ImportError:
            print(f"üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—é {package_name}...")
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install",
                    package_name, "--quiet", "--disable-pip-version-check"
                ])
                print(f"‚úÖ {package_name} —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {package_name}: {e}")
                return False

    def install_python_dependencies(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python –±—ñ–±–ª—ñ–æ—Ç–µ–∫...")

        packages = {
            'Pillow': 'PIL',
            'pytesseract': 'pytesseract',
            'pynput': 'pynput',
            'deep-translator': 'deep_translator',
            'sounddevice': 'sounddevice',
            'scipy': 'scipy',
            'numpy': 'numpy',
        }

        # –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞–∫–µ—Ç–∏
        for package, import_name in packages.items():
            self.install_pip_package(package, import_name)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CUDA –¥–ª—è torch
        cuda_available = self.check_cuda()

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PyTorch
        if cuda_available:
            print("üöÄ –í—Å—Ç–∞–Ω–æ–≤–ª—é—é PyTorch –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é CUDA...")
            torch_cmd = "torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121"
        else:
            print("üíª –í—Å—Ç–∞–Ω–æ–≤–ª—é—é PyTorch (CPU –≤–µ—Ä—Å—ñ—è)...")
            torch_cmd = "torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu"

        try:
            import torch
            print("‚úÖ PyTorch –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except ImportError:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install"] + torch_cmd.split())
                print("‚úÖ PyTorch –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ PyTorch: {e}")

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Whisper
        try:
            importlib.import_module('faster_whisper')
            print("‚úÖ faster-whisper –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except ImportError:
            print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—é faster-whisper...")
            self.install_pip_package('faster-whisper', 'faster_whisper')

    def check_cuda(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ CUDA"""
        try:
            if self.system == "Windows":
                result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, shell=True)
                return result.returncode == 0
            elif self.system in ["Linux", "Darwin"]:
                result = subprocess.run(['which', 'nvidia-smi'], capture_output=True, text=True)
                if result.returncode == 0:
                    result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
                    return result.returncode == 0
        except:
            pass
        return False

    def download_tesseract(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Tesseract OCR"""
        if self.system != "Windows":
            print("\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Tesseract –¥–æ—Å—Ç—É–ø–Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è Windows")
            print("\n–î–ª—è Linux –≤–∏–∫–æ–Ω–∞–π—Ç–µ: sudo apt-get install tesseract-ocr tesseract-ocr-ukr tesseract-ocr-eng")
            print("–î–ª—è macOS –≤–∏–∫–æ–Ω–∞–π—Ç–µ: brew install tesseract tesseract-lang")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è...")
            return None

        if self.tesseract_exe.exists():
            print(f"‚úÖ Tesseract –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.tesseract_exe}")
            return str(self.tesseract_exe)

        print("\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é Tesseract OCR...")
        print("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...")

        try:
            # URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Tesseract (–ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è)
            tesseract_url = "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
            installer_path = self.app_dir / "tesseract_installer.exe"

            print(f"üì° –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑ {tesseract_url}")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–æ–º
            def download_progress(block_num, block_size, total_size):
                downloaded = block_num * block_size
                percent = min(downloaded * 100 / total_size, 100)
                bar_length = 40
                filled = int(bar_length * percent / 100)
                bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
                print(f'\r[{bar}] {percent:.1f}%', end='', flush=True)

            urllib.request.urlretrieve(tesseract_url, installer_path, reporthook=download_progress)
            print("\n‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            # –ó–∞–ø—É—Å–∫ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞
            print("\nüì¶ –ó–∞–ø—É—Å–∫–∞—é —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä Tesseract...")
            print("‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –ü—ñ–¥ —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:")
            print("   1. –í–∏–±–µ—Ä—ñ—Ç—å —à–ª—è—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π")
            print("   2. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤–∏: English —Ç–∞ Ukrainian")
            print("   3. –ó–∞–ø–∞–º'—è—Ç–∞–π—Ç–µ —à–ª—è—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è!")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–∞–ø—É—Å–∫—É —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞...")

            subprocess.run([str(installer_path)], check=False)

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞
            try:
                installer_path.unlink()
            except:
                pass

            print("\n‚úÖ Tesseract –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("\nüìù –¢–µ–ø–µ—Ä –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —à–ª—è—Ö –¥–æ tesseract.exe")
            print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à–ª—è—Ö: C:\\Program Files\\Tesseract-OCR\\tesseract.exe")

            tesseract_path = input(
                "\n–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ tesseract.exe (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ): ").strip()

            if not tesseract_path:
                tesseract_path = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

            if Path(tesseract_path).exists():
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Tesseract: {tesseract_path}")
                return tesseract_path
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {tesseract_path}")
                print("–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ tesseract.exe –≤—Ä—É—á–Ω—É —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –∑–Ω–æ–≤—É")
                return None

        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Tesseract: {e}")
            print("\nüìù –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Tesseract –≤—Ä—É—á–Ω—É:")
            print("   1. –í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ: https://github.com/UB-Mannheim/tesseract/wiki")
            print("   2. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä –¥–ª—è Windows")
            print("   3. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑ –º–æ–≤–∞–º–∏ Ukrainian —Ç–∞ English")
            print("   4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É –∑–Ω–æ–≤—É")
            return None

    def find_tesseract(self):
        """–ü–æ—à—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ Tesseract"""
        possible_paths = [
            r"C:\Program Files\Tesseract-OCR\tesseract.exe",
            r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
            self.tesseract_exe,
        ]

        for path in possible_paths:
            if Path(path).exists():
                return str(path)

        # –ü–æ—à—É–∫ –≤ PATH
        if self.system == "Windows":
            result = subprocess.run(['where', 'tesseract'], capture_output=True, text=True, shell=True)
        else:
            result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)

        if result.returncode == 0:
            return result.stdout.strip().split('\n')[0]

        return None

    def setup(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        print("=" * 60)
        print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è STT + OCR + Translate")
        print("=" * 60)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
        self.check_python_version()

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python –±—ñ–±–ª—ñ–æ—Ç–µ–∫
        self.install_python_dependencies()

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Tesseract
        print("\nüîç –®—É–∫–∞—é Tesseract OCR...")
        tesseract_path = self.find_tesseract()

        if tesseract_path:
            print(f"‚úÖ Tesseract –∑–Ω–∞–π–¥–µ–Ω–æ: {tesseract_path}")
        else:
            print("‚ùå Tesseract –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –≤–∞—à–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ")
            tesseract_path = self.download_tesseract()

            if not tesseract_path:
                print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ Tesseract, –∞–ª–µ OCR —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        print("\n" + "=" * 60)
        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 60)

        return tesseract_path


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
def auto_setup():
    """–§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    installer = AutoInstaller()
    return installer.setup()


# –ó–∞–ø—É—Å–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
if __name__ != "__main__":
    print("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    try:
        # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
        import tkinter
        import PIL
        import pytesseract

        TESSERACT_PATH = None
    except ImportError:
        print("‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
        TESSERACT_PATH = auto_setup()
        print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(0)

# ==================== –û–°–ù–û–í–ù–ò–ô –ö–û–î –ü–†–û–ì–†–ê–ú–ò ====================

import io
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, colorchooser, font
from PIL import ImageGrab, ImageEnhance, ImageFilter, Image, ImageDraw, ImageTk
import pytesseract
import threading
from deep_translator import GoogleTranslator
from pynput import keyboard
import time
import math
from datetime import datetime
import numpy as np
import sounddevice as sd
from scipy.io.wavfile import write
import queue


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ Tesseract
def setup_tesseract():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ Tesseract"""
    possible_paths = [
        r"C:\Program Files\Tesseract-OCR\tesseract.exe",
        r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
        Path(__file__).parent / "tesseract" / "tesseract.exe",
    ]

    for path in possible_paths:
        if Path(path).exists():
            pytesseract.pytesseract.tesseract_cmd = str(path)
            print(f"‚úÖ Tesseract –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
            return True

    # –ü–æ—à—É–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É PATH
    system = platform.system()
    try:
        if system == "Windows":
            result = subprocess.run(['where', 'tesseract'], capture_output=True, text=True, shell=True)
        else:
            result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)

        if result.returncode == 0:
            tesseract_path = result.stdout.strip().split('\n')[0]
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            print(f"‚úÖ Tesseract –∑–Ω–∞–π–¥–µ–Ω–æ: {tesseract_path}")
            return True
    except:
        pass

    print("‚ö†Ô∏è Tesseract –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. OCR —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
    print("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Tesseract: https://github.com/UB-Mannheim/tesseract/wiki")
    return False


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Tesseract
TESSERACT_AVAILABLE = setup_tesseract()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Whisper —ñ CUDA
try:
    from faster_whisper import WhisperModel
    import torch

    WHISPER_AVAILABLE = True
    CUDA_AVAILABLE = torch.cuda.is_available()

    if CUDA_AVAILABLE:
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞! GPU: {torch.cuda.get_device_name(0)}")
    else:
        print("‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è CPU –¥–ª—è Whisper")
except ImportError:
    WHISPER_AVAILABLE = False
    CUDA_AVAILABLE = False
    print("‚ö†Ô∏è Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. STT —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –æ–±–º–µ–∂–µ–Ω—ñ.")


class FullRecorder:
    def __init__(self, samplerate=16000, channels=1, dtype='float32'):
        self.samplerate = samplerate
        self.channels = channels
        self.dtype = dtype
        self._frames = []
        self._stream = None
        self._q = queue.Queue()

    def _callback(self, indata, frames, time, status):
        if status:
            print("Record status:", status)
        self._q.put(indata.copy())

    def start(self):
        self._frames = []
        self._stream = sd.InputStream(
            samplerate=self.samplerate,
            channels=self.channels,
            dtype=self.dtype,
            callback=self._callback
        )
        self._stream.start()

    def stop(self):
        if self._stream:
            self._stream.stop()
            self._stream.close()
            self._stream = None

        while not self._q.empty():
            self._frames.append(self._q.get())

        if not self._frames:
            return np.zeros(0, dtype='float32')

        audio = np.concatenate([f.reshape(-1) if f.ndim > 1 else f for f in self._frames])
        return audio.astype('float32')


class ScreenSelector(tk.Toplevel):
    def __init__(self, callback):
        super().__init__()
        self.callback = callback
        self.attributes('-fullscreen', True)
        self.attributes('-alpha', 0.3)
        self.canvas = tk.Canvas(self, cursor="cross", bg='black')
        self.canvas.pack(fill="both", expand=True)
        self.start_x = self.start_y = 0
        self.rect = None
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.bind("<Escape>", self.cancel_selection)

    def on_press(self, event):
        self.start_x = self.canvas.canvasx(event.x)
        self.start_y = self.canvas.canvasy(event.y)
        self.rect = self.canvas.create_rectangle(
            self.start_x, self.start_y, self.start_x, self.start_y,
            outline='red', width=2)

    def on_drag(self, event):
        cur_x, cur_y = self.canvas.canvasx(event.x), self.canvas.canvasy(event.y)
        self.canvas.coords(self.rect, self.start_x, self.start_y, cur_x, cur_y)

    def cancel_selection(self, event):
        self.destroy()

    def on_release(self, event):
        x1 = min(self.start_x, self.canvas.canvasx(event.x))
        y1 = min(self.start_y, self.canvas.canvasy(event.y))
        x2 = max(self.start_x, self.canvas.canvasx(event.x))
        y2 = max(self.start_y, self.canvas.canvasy(event.y))
        self.withdraw()
        self.after(100, lambda: self.capture_area(x1, y1, x2, y2))

    def capture_area(self, x1, y1, x2, y2):
        if not TESSERACT_AVAILABLE:
            text = "[OCR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: Tesseract –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ]"
        else:
            try:
                img = ImageGrab.grab(bbox=(x1, y1, x2, y2))
                text = pytesseract.image_to_string(img, lang='ukr+eng')
            except Exception as e:
                text = f"[OCR –ø–æ–º–∏–ª–∫–∞: {e}]"

        self.callback(text)
        self.destroy()


class ScreenDrawer(tk.Toplevel):
    def __init__(self, app_instance):
        super().__init__()
        self.app_instance = app_instance

        self.attributes('-fullscreen', True)
        self.attributes('-alpha', 0.9)
        self.attributes('-topmost', False)
        self.configure(bg='gray20')

        self.current_tool = "brush"
        self.current_color = "#ff0000"
        self.brush_size = 3
        self.start_x = self.start_y = 0
        self.shapes = []
        self.temp_shape = None
        self.text_objects = []
        self.drawing = False

        self.canvas = tk.Canvas(self, highlightthickness=0, bg='gray10', cursor="crosshair")
        self.canvas.pack(fill="both", expand=True)

        self.canvas.bind("<Button-1>", self.start_draw)
        self.canvas.bind("<B1-Motion>", self.draw)
        self.canvas.bind("<ButtonRelease-1>", self.end_draw)
        self.canvas.bind("<Button-3>", self.show_context_menu)

        self.bind_all("<Escape>", self.close_drawer)
        self.bind_all("<Control-z>", self.undo)
        self.bind_all("<Control-s>", self.save_drawing)
        self.bind_all("<Delete>", self.clear_all)

        self.focus_set()
        self.after(100, self.create_sidebar)

    def create_sidebar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ–∫–æ–≤–æ—ó –ø–∞–Ω–µ–ª—ñ –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        self.sidebar = tk.Frame(self, bg='#2b2b2b', width=250, height=self.winfo_screenheight())
        self.sidebar.place(relx=1.0, rely=0, anchor="ne")
        self.sidebar.pack_propagate(False)

        title = tk.Label(self.sidebar, text="üé® –ú–∞–ª—é–≤–∞–ª–∫–∞", bg='#2b2b2b',
                         fg='white', font=('Arial', 12, 'bold'))
        title.pack(pady=10)

        tools_frame = tk.LabelFrame(self.sidebar, text="–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", bg='#2b2b2b', fg='white')
        tools_frame.pack(fill=tk.X, padx=10, pady=5)

        tools = [
            ("üñåÔ∏è –ü–µ–Ω–∑–µ–ª—å", "brush"),
            ("‚úèÔ∏è –û–ª—ñ–≤–µ—Ü—å", "pencil"),
            ("üìè –õ—ñ–Ω—ñ—è", "line"),
            ("‚¨ú –ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫", "rectangle"),
            ("‚≠ï –ö–æ–ª–æ", "circle"),
            ("üî∏ –ï–ª—ñ–ø—Å", "ellipse"),
            ("‚û°Ô∏è –°—Ç—Ä—ñ–ª–∫–∞", "arrow"),
            ("üìù –¢–µ–∫—Å—Ç", "text"),
            ("üßΩ –õ–∞—Å—Ç–∏–∫", "eraser")
        ]

        for i, (text, tool) in enumerate(tools):
            btn = tk.Button(tools_frame, text=text, bg='#404040', fg='white',
                            command=lambda t=tool: self.set_tool(t))
            btn.pack(fill=tk.X, pady=2, padx=5)
            if tool == "brush":
                btn.configure(bg='#ff4444')
                self.current_tool_btn = btn

        colors_frame = tk.LabelFrame(self.sidebar, text="–ö–æ–ª—å–æ—Ä–∏", bg='#2b2b2b', fg='white')
        colors_frame.pack(fill=tk.X, padx=10, pady=5)

        colors = ["#ff0000", "#00ff00", "#0000ff", "#ffff00", "#ff00ff", "#00ffff",
                  "#ffffff", "#000000", "#ff8000", "#8000ff", "#808080", "#008000"]

        color_grid = tk.Frame(colors_frame, bg='#2b2b2b')
        color_grid.pack(fill=tk.X, padx=5, pady=5)

        for i, color in enumerate(colors):
            row, col = i // 4, i % 4
            btn = tk.Button(color_grid, bg=color, width=3, height=1,
                            command=lambda c=color: self.set_color(c))
            btn.grid(row=row, column=col, padx=2, pady=2)

        choose_btn = tk.Button(colors_frame, text="üé® –í–∏–±—Ä–∞—Ç–∏ –∫–æ–ª—ñ—Ä", bg='#404040', fg='white',
                               command=self.choose_color)
        choose_btn.pack(fill=tk.X, padx=5, pady=5)

        self.color_preview = tk.Label(colors_frame, bg=self.current_color, text="–ü–æ—Ç–æ—á–Ω–∏–π",
                                      fg='white', font=('Arial', 8))
        self.color_preview.pack(fill=tk.X, padx=5, pady=2)

        size_frame = tk.LabelFrame(self.sidebar, text="–†–æ–∑–º—ñ—Ä", bg='#2b2b2b', fg='white')
        size_frame.pack(fill=tk.X, padx=10, pady=5)

        self.size_var = tk.IntVar(value=self.brush_size)
        size_scale = tk.Scale(size_frame, from_=1, to=20, orient=tk.HORIZONTAL,
                              variable=self.size_var, bg='#2b2b2b', fg='white',
                              command=self.update_size)
        size_scale.pack(fill=tk.X, padx=5, pady=5)

        alpha_frame = tk.LabelFrame(self.sidebar, text="–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –µ–∫—Ä–∞–Ω–∞", bg='#2b2b2b', fg='white')
        alpha_frame.pack(fill=tk.X, padx=10, pady=5)

        self.alpha_var = tk.DoubleVar(value=0.9)
        alpha_scale = tk.Scale(alpha_frame, from_=0.3, to=1.0, orient=tk.HORIZONTAL,
                               variable=self.alpha_var, bg='#2b2b2b', fg='white',
                               resolution=0.1, command=self.update_alpha)
        alpha_scale.pack(fill=tk.X, padx=5, pady=5)

        actions_frame = tk.LabelFrame(self.sidebar, text="–î—ñ—ó", bg='#2b2b2b', fg='white')
        actions_frame.pack(fill=tk.X, padx=10, pady=5)

        actions = [
            ("‚Ü©Ô∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ (Ctrl+Z)", self.undo),
            ("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ (Del)", self.clear_all),
            ("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ (Ctrl+S)", self.save_drawing),
            ("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ (Esc)", self.close_drawer)
        ]

        for text, command in actions:
            tk.Button(actions_frame, text=text, bg='#404040', fg='white',
                      command=command).pack(fill=tk.X, pady=2, padx=5)

    def set_tool(self, tool):
        self.current_tool = tool
        for widget in self.sidebar.winfo_children():
            if isinstance(widget, tk.LabelFrame) and widget.cget('text') == '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏':
                for btn in widget.winfo_children():
                    if isinstance(btn, tk.Button):
                        if tool in btn.cget('text').lower():
                            btn.configure(bg='#ff4444')
                        else:
                            btn.configure(bg='#404040')

    def set_color(self, color):
        self.current_color = color
        self.color_preview.configure(bg=color)

    def choose_color(self):
        color = colorchooser.askcolor(title="–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä")[1]
        if color:
            self.set_color(color)

    def update_size(self, value):
        self.brush_size = int(value)

    def update_alpha(self, value):
        self.attributes('-alpha', float(value))

    def start_draw(self, event):
        self.drawing = True
        self.start_x, self.start_y = event.x, event.y

        if self.current_tool == "text":
            self.add_text(event.x, event.y)
        elif self.current_tool == "eraser":
            self.erase_at_point(event.x, event.y)
        elif self.current_tool in ["brush", "pencil"]:
            width = self.brush_size if self.current_tool == "brush" else max(1, self.brush_size // 2)
            point = self.canvas.create_oval(
                event.x - width // 2, event.y - width // 2,
                event.x + width // 2, event.y + width // 2,
                fill=self.current_color, outline=self.current_color)
            self.shapes.append(point)

    def draw(self, event):
        if not self.drawing:
            return

        if self.current_tool in ["brush", "pencil"]:
            width = self.brush_size if self.current_tool == "brush" else max(1, self.brush_size // 2)
            line_id = self.canvas.create_line(
                self.start_x, self.start_y, event.x, event.y,
                fill=self.current_color, width=width,
                capstyle=tk.ROUND, smooth=True)
            self.shapes.append(line_id)
            self.start_x, self.start_y = event.x, event.y

        elif self.current_tool == "eraser":
            self.erase_at_point(event.x, event.y)

        elif self.current_tool in ["line", "rectangle", "circle", "ellipse", "arrow"]:
            if self.temp_shape:
                self.canvas.delete(self.temp_shape)
            self.temp_shape = self.draw_shape(self.start_x, self.start_y, event.x, event.y)

    def end_draw(self, event):
        self.drawing = False

        if self.current_tool in ["line", "rectangle", "circle", "ellipse", "arrow"]:
            if self.temp_shape:
                self.canvas.delete(self.temp_shape)

            shape_id = self.draw_shape(self.start_x, self.start_y, event.x, event.y)
            if shape_id:
                self.shapes.append(shape_id)
            self.temp_shape = None

    def draw_shape(self, x1, y1, x2, y2, temp=False):
        if self.current_tool == "line":
            return self.canvas.create_line(x1, y1, x2, y2, fill=self.current_color, width=self.brush_size)

        elif self.current_tool == "rectangle":
            return self.canvas.create_rectangle(x1, y1, x2, y2, outline=self.current_color, width=self.brush_size)

        elif self.current_tool == "circle":
            radius = max(abs(x2 - x1), abs(y2 - y1)) // 2
            cx, cy = x1, y1
            return self.canvas.create_oval(cx - radius, cy - radius, cx + radius, cy + radius,
                                           outline=self.current_color, width=self.brush_size)

        elif self.current_tool == "ellipse":
            return self.canvas.create_oval(x1, y1, x2, y2, outline=self.current_color, width=self.brush_size)

        elif self.current_tool == "arrow":
            arrow_id = self.canvas.create_line(x1, y1, x2, y2, fill=self.current_color,
                                               width=self.brush_size, arrow=tk.LAST, arrowshape=(16, 20, 6))
            return arrow_id

    def add_text(self, x, y):
        def submit_text():
            text = text_entry.get()
            if text:
                text_id = self.canvas.create_text(x, y, text=text, fill=self.current_color,
                                                  font=('Arial', self.brush_size + 8), anchor='nw')
                self.shapes.append(text_id)
                self.text_objects.append((text_id, text, x, y))
            dialog.destroy()

        dialog = tk.Toplevel(self)
        dialog.title("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç")
        dialog.geometry("300x100")
        dialog.attributes('-topmost', True)

        tk.Label(dialog, text="–¢–µ–∫—Å—Ç:").pack(pady=5)
        text_entry = tk.Entry(dialog, width=40)
        text_entry.pack(pady=5)
        text_entry.focus()

        btn_frame = tk.Frame(dialog)
        btn_frame.pack(pady=5)

        tk.Button(btn_frame, text="OK", command=submit_text).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=dialog.destroy).pack(side=tk.LEFT, padx=5)

        text_entry.bind('<Return>', lambda e: submit_text())
        dialog.bind('<Escape>', lambda e: dialog.destroy())

    def erase_at_point(self, x, y):
        nearby = self.canvas.find_overlapping(x - self.brush_size, y - self.brush_size,
                                              x + self.brush_size, y + self.brush_size)
        for item in nearby:
            if item in self.shapes:
                self.canvas.delete(item)
                self.shapes.remove(item)

    def show_context_menu(self, event):
        menu = tk.Menu(self, tearoff=0)
        menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ", command=self.clear_all)
        menu.add_command(label="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=self.undo)
        menu.add_separator()
        menu.add_command(label="–ó–±–µ—Ä–µ–≥—Ç–∏", command=self.save_drawing)
        menu.add_separator()
        menu.add_command(label="–ó–∞–∫—Ä–∏—Ç–∏", command=self.close_drawer)

        try:
            menu.tk_popup(event.x_root, event.y_root)
        finally:
            menu.grab_release()

    def undo(self, event=None):
        if self.shapes:
            last_shape = self.shapes.pop()
            self.canvas.delete(last_shape)

    def clear_all(self, event=None):
        for shape in self.shapes:
            self.canvas.delete(shape)
        self.shapes.clear()
        self.text_objects.clear()

    def save_drawing(self, event=None):
        try:
            filename = f"drawing_{int(time.time())}.png"
            ps = self.canvas.postscript(colormode='color')
            img = Image.open(io.BytesIO(ps.encode('utf-8')))
            img.save(filename, 'png')

            info_window = tk.Toplevel(self)
            info_window.title("–ó–±–µ—Ä–µ–∂–µ–Ω–æ")
            info_window.geometry("300x100")
            info_window.attributes('-topmost', True)

            tk.Label(info_window, text=f"–ú–∞–ª—é–Ω–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫:\n{filename}").pack(pady=20)
            tk.Button(info_window, text="OK", command=info_window.destroy).pack()

            info_window.after(3000, info_window.destroy)

        except Exception as e:
            error_window = tk.Toplevel(self)
            error_window.title("–ü–æ–º–∏–ª–∫–∞")
            error_window.geometry("300x100")
            error_window.attributes('-topmost', True)

            tk.Label(error_window, text=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏:\n{str(e)[:50]}...").pack(pady=20)
            tk.Button(error_window, text="OK", command=error_window.destroy).pack()

    def close_drawer(self, event=None):
        self.unbind_all("<Escape>")
        self.destroy()
        self.app_instance.root.deiconify()

class AdvancedScreenSelector(tk.Toplevel):
    def __init__(self, callback):
        super().__init__()
        self.root = root
        self.callback = callback
        self.attributes('-fullscreen', True)
        self.attributes('-alpha', 0.3)
        self.canvas = tk.Canvas(self, cursor="cross", bg='black')
        self.canvas.pack(fill="both", expand=True)
        self.start_x = self.start_y = 0
        self.rect = None
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.bind("<Escape>", self.cancel_selection)

    def on_press(self, event):
        self.start_x = self.canvas.canvasx(event.x)
        self.start_y = self.canvas.canvasy(event.y)
        if self.rect:
            self.canvas.delete(self.rect)
        self.rect = self.canvas.create_rectangle(
            self.start_x, self.start_y, self.start_x, self.start_y,
            outline='red', width=2, dash=(5, 5))

    def on_drag(self, event):
        cur_x, cur_y = self.canvas.canvasx(event.x), self.canvas.canvasy(event.y)
        self.canvas.coords(self.rect, self.start_x, self.start_y, cur_x, cur_y)

    def cancel_selection(self, event):
        self.destroy()

    def on_release(self, event):
        x1 = min(self.start_x, self.canvas.canvasx(event.x))
        y1 = min(self.start_y, self.canvas.canvasy(event.y))
        x2 = max(self.start_x, self.canvas.canvasx(event.x))
        y2 = max(self.start_y, self.canvas.canvasy(event.y))

        if abs(x2 - x1) < 10 or abs(y2 - y1) < 10:
            self.destroy()
            return

        self.withdraw()
        self.after(200, lambda: self.capture_area(x1, y1, x2, y2))

    def preprocess_image(self, img):
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(1.5)
        img = img.filter(ImageFilter.SHARPEN)
        return img

    def capture_area(self, x1, y1, x2, y2):
        try:
            img = ImageGrab.grab(bbox=(int(x1), int(y1), int(x2), int(y2)))
            img = self.preprocess_image(img)
            text = pytesseract.image_to_string(img, lang='ukr+eng', config='--psm 6')
            text = text.strip()
            if not text:
                text = "[–¢–µ–∫—Å—Ç –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ]"
        except Exception as e:
            text = f"[OCR –ø–æ–º–∏–ª–∫–∞: {e}]"

        self.callback(text)
        self.destroy()
        self.root.deiconify()


class EnhancedApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ STT + OCR + Translate Pro (Whisper CUDA)")
        self.root.geometry("400x550")
        self.root.minsize(500, 400)

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–ø–∏—Å—É
        self.whisper_model = None
        self.whisper_model_size = "medium"
        self.recorder = None
        self.transcribe_thread = None
        self.is_recording = False

        # –ü—Ä–∞–ø–æ—Ä—Ü—ñ —Å—Ç–∞–Ω—É
        self.speech_active = False
        self.auto_translate = tk.BooleanVar()
        self.save_history = tk.BooleanVar()
        self.is_closing = False
        self.hotkey_listener = None

        self.build_enhanced_ui()
        # self.setup_hotkey()  # –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        self.load_settings()

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        # self.root.after(100, self.initial_show_hide)  # –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø—É—Å–∫—É

    def build_enhanced_ui(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", menu=settings_menu)
        settings_menu.add_checkbutton(label="–ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª–∞–¥", variable=self.auto_translate)
        settings_menu.add_checkbutton(label="–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", variable=self.save_history)
        settings_menu.add_separator()
        settings_menu.add_command(label="üé® –ú–∞–ª—é–≤–∞–ª–∫–∞", command=self.open_drawer)
        settings_menu.add_separator()
        settings_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", command=self.clear_history)

        toolbar = ttk.Frame(self.root)
        toolbar.pack(fill=tk.X, padx=5, pady=2)

        ttk.Label(toolbar, text="üî• –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø:").pack(side=tk.LEFT)
        ttk.Button(toolbar, text="üì∑", command=self.quick_ocr, width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üé§", command=self.quick_speech, width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üé®", command=self.open_drawer, width=3).pack(side=tk.LEFT, padx=2)

        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ | Whisper: –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        tab_control = ttk.Notebook(self.root)

        # OCR TAB
        ocr_tab = ttk.Frame(tab_control)
        ocr_controls = ttk.Frame(ocr_tab)
        ocr_controls.pack(fill=tk.X, padx=5, pady=5)

        self.ocr_text = scrolledtext.ScrolledText(ocr_tab, wrap=tk.WORD, font=('Arial', 11))
        self.ocr_advanced_btn = ttk.Button(ocr_controls, text="üì∏ OCR", command=self.run_advanced_ocr)
        self.ocr_clear_btn = ttk.Button(ocr_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
                                        command=lambda: self.clear_text(self.ocr_text))
        self.ocr_copy_btn = ttk.Button(ocr_controls, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏", command=lambda: self.copy_text(self.ocr_text))

        self.ocr_advanced_btn.pack(side=tk.LEFT, padx=2)
        self.ocr_clear_btn.pack(side=tk.LEFT, padx=2)
        self.ocr_copy_btn.pack(side=tk.LEFT, padx=2)
        self.ocr_text.pack(expand=True, fill='both', padx=5, pady=5)

        # STT TAB
        stt_tab = ttk.Frame(tab_control)
        stt_controls = ttk.Frame(stt_tab)
        stt_controls.pack(fill=tk.X, padx=5, pady=5)

        self.speech_text = scrolledtext.ScrolledText(stt_tab, wrap=tk.WORD, font=('Arial', 11))
        self.speech_button = ttk.Button(stt_controls, text="üéß –ü–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å (Whisper)", command=self.handle_speech)
        self.speech_clear_btn = ttk.Button(stt_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
                                           command=lambda: self.clear_text(self.speech_text))
        self.speech_copy_btn = ttk.Button(stt_controls, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏",
                                          command=lambda: self.copy_text(self.speech_text))

        self.mic_status = ttk.Label(stt_controls, text="üî¥", font=('Arial', 16))

        self.speech_button.pack(side=tk.LEFT, padx=2)
        self.speech_clear_btn.pack(side=tk.LEFT, padx=2)
        self.speech_copy_btn.pack(side=tk.LEFT, padx=2)
        self.mic_status.pack(side=tk.RIGHT, padx=5)
        self.speech_text.pack(expand=True, fill='both', padx=5, pady=5)

        # TRANSLATE TAB
        trans_tab = ttk.Frame(tab_control)
        trans_controls = ttk.Frame(trans_tab)
        trans_controls.pack(fill=tk.X, padx=5, pady=5)

        ttk.Label(trans_controls, text="–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:").pack(anchor=tk.W)
        self.input_text = scrolledtext.ScrolledText(trans_tab, wrap=tk.WORD, height=8, font=('Arial', 11))
        self.input_text.pack(fill='both', padx=5, pady=5)

        lang_frame = ttk.Frame(trans_tab)
        lang_frame.pack(fill=tk.X, padx=5, pady=2)

        ttk.Label(lang_frame, text="–ù–∞–ø—Ä—è–º–æ–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É:").pack(side=tk.LEFT)
        self.lang_combo = ttk.Combobox(lang_frame, values=[
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
            "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –ù—ñ–º–µ—Ü—å–∫–∞",
            "–ù—ñ–º–µ—Ü—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞",
            "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
        ], state="readonly", width=25)
        self.lang_combo.current(0)
        self.lang_combo.pack(side=tk.LEFT, padx=5)

        translate_btn_frame = ttk.Frame(trans_tab)
        translate_btn_frame.pack(fill=tk.X, padx=5, pady=5)

        self.translate_button = ttk.Button(translate_btn_frame, text="üåç –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏", command=self.run_translate)
        self.translate_button.pack(side=tk.LEFT, padx=2)

        ttk.Label(trans_tab, text="–ü–µ—Ä–µ–∫–ª–∞–¥:").pack(anchor=tk.W, padx=5)
        self.output_text = scrolledtext.ScrolledText(trans_tab, wrap=tk.WORD, height=8, font=('Arial', 11))
        self.output_text.pack(expand=True, fill='both', padx=5, pady=5)

        tab_control.add(ocr_tab, text="üñºÔ∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É")
        tab_control.add(stt_tab, text="üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ (Whisper)")
        tab_control.add(trans_tab, text="üåç –ü–µ—Ä–µ–∫–ª–∞–¥")
        tab_control.pack(expand=True, fill='both', padx=5, pady=5)

        for widget in [self.ocr_text, self.speech_text, self.input_text, self.output_text]:
            widget.bind("<Control-c>", self.copy_event)
            widget.bind("<Control-v>", self.paste_event)
            widget.bind("<Control-a>", self.select_all_event)

    # def initial_show_hide(self):
    #     """–ü—Ä–∞–≤–∏–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –≤—ñ–∫–Ω–∞"""
    #
    #     def do_hide():
    #         # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–∫–Ω–æ, —â–æ–± –≤–æ–Ω–æ –±—É–ª–æ –¥–æ—Å—Ç—É–ø–Ω–µ
    #         self.root.deiconify()
    #         self.root.update_idletasks()
    #
    #         # –ü–æ—Ç—ñ–º –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –π–æ–≥–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
    #         self.root.withdraw()
    #         print("[Init] –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+Shift+Q –¥–ª—è –ø–æ–∫–∞–∑—É.")
    #
    #     # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é, —â–æ–± —É—Å–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–ª–æ—Å—è
    #     self.root.after(500, do_hide)

    def auto_close(self, delay_seconds=0):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å"""

        def close_sequence():
            if delay_seconds > 0:
                print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É GUI
                self.root.after(0, lambda: self.update_status(f"üîí –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ {delay_seconds}—Å..."))
                time.sleep(delay_seconds)

            print("üîí –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è...")
            self.root.after(0, self.safe_close)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        close_thread = threading.Thread(target=close_sequence, daemon=True)
        close_thread.start()

    def safe_close(self):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.is_closing:
            return

        self.is_closing = True
        print("üîí –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä–∏—Ç—Ç—è...")

        try:
            self.update_status("üîí –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—ñ–∫–Ω–æ (—Ñ–æ–Ω–æ–≤–∏–π —Ä–µ–∂–∏–º)...")

            if self.is_recording and self.recorder:
                self.recorder.stop()

            if self.speech_active and hasattr(self, 'speech_thread'):
                self.speech_thread.stop()

            if self.hotkey_listener:
                # –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ, —â–æ–± –≥–∞—Ä—è—á–∞ –∫–ª–∞–≤—ñ—à–∞ –∑–∞–ª–∏—à–∞–ª–∞—Å—å –∞–∫—Ç–∏–≤–Ω–æ—é
                pass

            self.save_settings()
            # self.root.withdraw()  # –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ - –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
            self.root.destroy()  # –ü–æ–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º—ñ—Å—Ç—å –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è
            print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–∫—Ä–∏—Ç–∞.")

        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ: {e}")
            import os
            os._exit(0)

    def toggle_visibility(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞—á –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤—ñ–∫–Ω–∞"""
        try:
            if not self.root.winfo_exists():
                print("‚ö†Ô∏è –í—ñ–∫–Ω–æ –∑–Ω–∏—â–µ–Ω–æ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
                return

            if self.root.state() == 'withdrawn' or not self.root.winfo_viewable():
                self.root.deiconify()
                self.root.lift()
                self.root.focus_force()
                self.root.attributes('-topmost', True)
                self.update_status("–í—ñ–∫–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
                self.root.after(1000, lambda: self.root.attributes('-topmost', False))
            else:
                self.root.withdraw()
                self.update_status("–í—ñ–∫–Ω–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ (Ctrl+Shift+Q –¥–ª—è –ø–æ–∫–∞–∑—É)")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ: {e}")

    def hide_window(self):
        """–ù–∞–¥—ñ–π–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞"""
        try:
            self.root.withdraw()
            self.update_status("–í—ñ–∫–Ω–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ (Ctrl+Shift+Q –¥–ª—è –ø–æ–∫–∞–∑—É)")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞: {e}")

    # def setup_hotkey(self):
    #     """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à (–±–µ–∑ –≤–∏–∫–ª–∏–∫—É GUI –∑ —á—É–∂–æ–≥–æ –ø–æ—Ç–æ–∫—É)"""
    #     import queue
    #     self.hotkey_queue = queue.Queue()

    #     def on_activate():
    #         # –∫–ª–∞–¥–µ–º–æ –ø–æ–¥—ñ—é –≤ —á–µ—Ä–≥—É, –∞ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ GUI –ø—Ä—è–º–æ
    #         self.hotkey_queue.put("toggle")

    #     def listen():
    #         try:
    #             hotkey = keyboard.HotKey(
    #                 keyboard.HotKey.parse('<ctrl>+<shift>+q'),
    #                 on_activate
    #             )

    #             self.hotkey_listener = keyboard.Listener(
    #                 on_press=lambda k: hotkey.press(self.hotkey_listener.canonical(k)),
    #                 on_release=lambda k: hotkey.release(self.hotkey_listener.canonical(k))
    #             )
    #             self.hotkey_listener.start()
            #     print("–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ: Ctrl+Shift+Q")
            # except Exception as e:
            #     print(f"–ü–æ–º–∏–ª–∫–∞ –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à: {e}")
            #     time.sleep(5)
            #     listen()

        # –§–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è pynput
        # threading.Thread(target=listen, daemon=True).start()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–≥—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É –∫–æ–∂–Ω—ñ 200 –º—Å
        def check_queue():
            try:
                while True:
                    action = self.hotkey_queue.get_nowait()
                    if action == "toggle":
                        self.toggle_visibility()
            except queue.Empty:
                pass
            self.root.after(200, check_queue)

        self.root.after(200, check_queue)

    def update_status(self, message):
        self.status_var.set(message)
        self.root.update_idletasks()

    def update_mic_status(self, message):
        if "–ó–∞–ø–∏—Å" in message:
            self.mic_status.config(text="üî¥", foreground="red")
        elif "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—é" in message:
            self.mic_status.config(text="üü°", foreground="orange")
        elif "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ" in message:
            self.mic_status.config(text="‚úÖ", foreground="green")
        elif "–ø–æ–º–∏–ª–∫–∞" in message.lower():
            self.mic_status.config(text="‚ùå", foreground="red")
        elif "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" in message:
            self.mic_status.config(text="‚è≥", foreground="blue")
        else:
            self.mic_status.config(text="‚ö™", foreground="gray")

        self.update_status(message)

    def open_drawer(self):
        try:
            self.root.withdraw()
            self.update_status("–ú–∞–ª—é–≤–∞–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞")
            ScreenDrawer(self)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞–ª—é–≤–∞–ª–∫—É: {e}")
            self.root.deiconify()

    def quick_ocr(self):
        self.run_ocr()

    def quick_speech(self):
        self.handle_speech()

    def quick_translate(self):
        if self.input_text.get(1.0, tk.END).strip():
            self.run_translate()

    def clear_text(self, text_widget):
        text_widget.delete(1.0, tk.END)

    def copy_text(self, text_widget):
        content = text_widget.get(1.0, tk.END).strip()
        if content:
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            self.update_status("–¢–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!")

    def clear_history(self):
        for widget in [self.ocr_text, self.speech_text, self.input_text, self.output_text]:
            widget.delete(1.0, tk.END)
        self.update_status("–Ü—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞")

    def run_ocr(self):
        self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...")
        ScreenSelector(self.set_ocr_text)

    def run_advanced_ocr(self):
        self.root.withdraw()
        self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ OCR...")
        time.sleep(0.1)
        AdvancedScreenSelector(self.set_ocr_text)

    def set_ocr_text(self, text):
        self.ocr_text.delete(1.0, tk.END)
        self.ocr_text.insert(tk.END, text.strip())

        if self.auto_translate.get() and text.strip():
            self.input_text.delete(1.0, tk.END)
            self.input_text.insert(tk.END, text.strip())
            self.run_translate()

        self.update_status(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")

    def handle_speech(self):
        # –Ω–æ–≤–∞ –ª–æ–≥—ñ–∫–∞: —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø -> —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É—î–º–æ –≤–µ—Å—å –∑–∞–ø–∏—Å –ø—Ä–∏ —Å—Ç–æ–ø—ñ
        if getattr(self, "is_recording", False):
            # –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.is_recording = False
            self.speech_button.config(text="üéß –ü–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å (Whisper)")
            self.update_mic_status("–ó—É–ø–∏–Ω–µ–Ω–æ. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—é...")
            try:
                audio = self.recorder.stop()
            except Exception as e:
                self.update_mic_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É: {e}")
                return

            def transcribe_job(audio_array):
                try:
                    # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    self.load_whisper_model()

                    if audio_array.shape[0] == 0:
                        self.update_mic_status("‚ö†Ô∏è –ü—É—Å—Ç–∏–π –∑–∞–ø–∏—Å")
                        return

                    # faster-whisper –ø—Ä–∏–π–º–∞—î numpy float32 –∑ sample_rate=16000
                    segments, info = self.whisper_model.transcribe(
                        audio_array,
                        beam_size=5,
                        language="uk",  # –∞–≤—Ç–æ
                        task="transcribe",
                    )

                    # –∑–±–∏—Ä–∞—î–º–æ —Ç–µ–∫—Å—Ç
                    parts = []
                    for seg in segments:
                        txt = seg.text.strip()
                        if txt:
                            parts.append(txt)

                    full_text = " ".join(parts).strip()

                    # –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ —Ä–∞–∑–æ–º –∑ —Ä–æ–∑–º—ñ—Ç–∫–æ—é —á–∞—Å—É/–º–æ–≤–∞
                    final = full_text

                    # –æ–Ω–æ–≤–ª—é—î–º–æ GUI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                    def gui_update():
                        self.speech_text.insert(tk.END, final + "\n\n")
                        self.speech_text.see(tk.END)
                        self.update_mic_status("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

                    self.root.after(0, gui_update)

                except Exception as error_s:
                    error_msg = str(error_s)
                    if "Whisper –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π" in error_msg:
                        self.root.after(0, lambda: self.update_mic_status("‚ùå Whisper –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ OCR –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É."))
                    else:
                        self.root.after(0, lambda: self.update_mic_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó: {error_msg}"))

            self.transcribe_thread = threading.Thread(target=transcribe_job, args=(audio,), daemon=True)
            self.transcribe_thread.start()
            return

        # —è–∫—â–æ –Ω–µ –∑–∞–ø–∏—Å—É—î–º–æ ‚Äî —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å—É
        try:
            self.recorder = FullRecorder(samplerate=16000, channels=1)
            self.recorder.start()
            self.is_recording = True
            self.speech_button.config(text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ —ñ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞—Ç–∏")
            self.update_mic_status("üé§ –ó–∞–ø–∏—Å...")
        except Exception as e:
            self.update_mic_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç—É –∑–∞–ø–∏—Å—É: {e}")
            self.is_recording = False

    def load_whisper_model(self):
        if self.whisper_model is None:
            self.update_status("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Whisper –º–æ–¥–µ–ª—ñ...")
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ Whisper
                from faster_whisper import WhisperModel
                import torch

                device = "cuda" if torch.cuda.is_available() else "cpu"
                compute_type = "float16" if device == "cuda" else "int8"

                self.whisper_model = WhisperModel(
                    self.whisper_model_size,
                    device=device,
                    compute_type=compute_type
                )
                dev_info = f"GPU ({torch.cuda.get_device_name(0)})" if device == "cuda" else "CPU"
                self.update_status(f"‚úÖ Whisper –≥–æ—Ç–æ–≤–∏–π ({dev_info})")
            except ImportError:
                self.update_status("‚ùå Whisper –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install faster-whisper torch")
                raise Exception("Whisper –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            except Exception as e:
                self.update_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Whisper: {e}")
                raise

    def get_translation_languages(self, selection):
        lang_map = {
            0: ("uk", "en"),
            1: ("en", "uk"),
            2: ("uk", "de"),
            3: ("de", "uk"),
            4: ("uk", "fr"),
            5: ("fr", "uk"),
        }
        return lang_map.get(selection, ("uk", "en"))

    def run_translate(self):
        text = self.input_text.get(1.0, tk.END).strip()
        if not text:
            messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É")
            return

        self.update_status("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—é...")

        try:
            from_lang, to_lang = self.get_translation_languages(self.lang_combo.current())

            translator = GoogleTranslator(source=from_lang, target=to_lang)
            translated = translator.translate(text)

            self.output_text.config(state='normal')
            self.output_text.delete(1.0, tk.END)
            self.output_text.insert(tk.END, translated)
            self.output_text.config(state='disabled')

            self.update_status(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({from_lang} ‚Üí {to_lang})")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç:\n{str(e)}")
            self.update_status("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É")

    def copy_event(self, event):
        try:
            selected = event.widget.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected)
            return "break"
        except tk.TclError:
            pass

    def paste_event(self, event):
        try:
            content = self.root.clipboard_get()
            if event.widget.winfo_class() == 'Text':
                event.widget.insert(tk.INSERT, content)
            return "break"
        except tk.TclError:
            pass

    def select_all_event(self, event):
        event.widget.tag_add(tk.SEL, "1.0", tk.END)
        return "break"

    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        pass

    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        pass

    def on_close(self):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞"""
        print("üîí –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏...")
        self.safe_close()


if __name__ == "__main__":
    print("[–ó–∞–ø—É—Å–∫] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É –≤–µ—Ä—Å—ñ—é –∑ Whisper CUDA...")
    root = tk.Tk()
    style = ttk.Style()
    style.theme_use('clam')
    app = EnhancedApp(root)
    # root.after(100, app.initial_show_hide)  # –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    root.mainloop()




