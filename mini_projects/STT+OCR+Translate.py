import io
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, colorchooser, font
from PIL import ImageGrab, ImageEnhance, ImageFilter, Image, ImageDraw, ImageTk
import pytesseract
import threading
import speech_recognition as sr
from deep_translator import GoogleTranslator
from pynput import keyboard
import time
import math
from datetime import datetime

# === –í–∫–∞–∂–∏ —à–ª—è—Ö –¥–æ tesseract.exe, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ===
pytesseract.pytesseract.tesseract_cmd = r"D:\\Games\\tesseract_ocr\\tesseract.exe"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PyAudio
try:
    import pyaudio

    PYAUDIO_AVAILABLE = True
except ImportError:
    PYAUDIO_AVAILABLE = False
    print("PyAudio –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–æ–º–∞–Ω–¥–æ—é: pip install pyaudio")


class ScreenSelector(tk.Toplevel):
    def __init__(self, callback):
        super().__init__()
        self.callback = callback
        self.attributes('-fullscreen', True)
        self.attributes('-alpha', 0.3)
        self.canvas = tk.Canvas(self, cursor="cross", bg='black')
        self.canvas.pack(fill="both", expand=True)
        self.start_x = self.start_y = 0
        self.rect = None
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.bind("<Escape>", self.cancel_selection)

    def on_press(self, event):
        self.start_x = self.canvas.canvasx(event.x)
        self.start_y = self.canvas.canvasy(event.y)
        self.rect = self.canvas.create_rectangle(
            self.start_x, self.start_y, self.start_x, self.start_y, outline='red', width=2)

    def on_drag(self, event):
        cur_x, cur_y = self.canvas.canvasx(event.x), self.canvas.canvasy(event.y)
        self.canvas.coords(self.rect, self.start_x, self.start_y, cur_x, cur_y)

    def cancel_selection(self, event):
        self.destroy()

    def on_release(self, event):
        x1 = min(self.start_x, self.canvas.canvasx(event.x))
        y1 = min(self.start_y, self.canvas.canvasy(event.y))
        x2 = max(self.start_x, self.canvas.canvasx(event.x))
        y2 = max(self.start_y, self.canvas.canvasy(event.y))
        self.withdraw()
        self.after(100, lambda: self.capture_area(x1, y1, x2, y2))

    def capture_area(self, x1, y1, x2, y2):
        try:
            # –ó–∞—Ö–æ–ø–ª—é—î–º–æ –æ–±–ª–∞—Å—Ç—å
            img = ImageGrab.grab(bbox=(x1, y1, x2, y2))

            # –ü—Ä–æ—Å—Ç—ñ—à–∏–π OCR –±–µ–∑ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
            text = pytesseract.image_to_string(img, lang='ukr+eng')

        except Exception as e:
            text = f"[OCR –ø–æ–º–∏–ª–∫–∞: {e}]"

        self.callback(text)
        self.destroy()


class ScreenDrawer(tk.Toplevel):
    def __init__(self, app_instance):
        super().__init__()
        self.app_instance = app_instance

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.attributes('-fullscreen', True)
        self.attributes('-alpha', 0.9)  # –ú–µ–Ω—à –ø—Ä–æ–∑–æ—Ä–∏–π –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ
        self.attributes('-topmost', False)  # –ù–ï –∑–∞–≤–∂–¥–∏ –∑–≤–µ—Ä—Ö—É
        self.configure(bg='gray20')  # –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π —Ñ–æ–Ω

        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
        self.current_tool = "brush"
        self.current_color = "#ff0000"
        self.brush_size = 3
        self.start_x = self.start_y = 0
        self.shapes = []
        self.temp_shape = None
        self.text_objects = []
        self.drawing = False  # –î–æ–¥–∞—î–º–æ —Ñ–ª–∞–≥ –º–∞–ª—é–≤–∞–Ω–Ω—è

        # –°—Ç–≤–æ—Ä—é—î–º–æ Canvas –∑ –≤–∏–¥–∏–º–∏–º —Ñ–æ–Ω–æ–º
        self.canvas = tk.Canvas(self, highlightthickness=0, bg='gray10', cursor="crosshair")
        self.canvas.pack(fill="both", expand=True)

        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –ø–æ–¥—ñ—ó
        self.canvas.bind("<Button-1>", self.start_draw)
        self.canvas.bind("<B1-Motion>", self.draw)
        self.canvas.bind("<ButtonRelease-1>", self.end_draw)
        self.canvas.bind("<Button-3>", self.show_context_menu)

        # –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ
        self.bind_all("<Escape>", self.close_drawer)
        self.bind_all("<Control-z>", self.undo)
        self.bind_all("<Control-s>", self.save_drawing)
        self.bind_all("<Delete>", self.clear_all)

        self.focus_set()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ–∫–æ–≤—É –ø–∞–Ω–µ–ª—å
        self.after(100, self.create_sidebar)

    def create_sidebar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ–∫–æ–≤–æ—ó –ø–∞–Ω–µ–ª—ñ –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        sidebar_width = 250
        self.sidebar = tk.Frame(self, bg='#2b2b2b', width=250, height=self.winfo_screenheight())
        self.sidebar.place(relx=1.0, rely=0, anchor="ne")
        self.sidebar.pack_propagate(False)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.sidebar, text="üé® –ú–∞–ª—é–≤–∞–ª–∫–∞", bg='#2b2b2b', fg='white', font=('Arial', 12, 'bold'))
        title.pack(pady=10)

        # === –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ò ===
        tools_frame = tk.LabelFrame(self.sidebar, text="–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", bg='#2b2b2b', fg='white')
        tools_frame.pack(fill=tk.X, padx=10, pady=5)

        tools = [
            ("üñåÔ∏è –ü–µ–Ω–∑–µ–ª—å", "brush"),
            ("‚úèÔ∏è –û–ª—ñ–≤–µ—Ü—å", "pencil"),
            ("üìè –õ—ñ–Ω—ñ—è", "line"),
            ("‚¨ú –ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫", "rectangle"),
            ("‚≠ï –ö–æ–ª–æ", "circle"),
            ("üî∏ –ï–ª—ñ–ø—Å", "ellipse"),
            ("‚û°Ô∏è –°—Ç—Ä—ñ–ª–∫–∞", "arrow"),
            ("üìù –¢–µ–∫—Å—Ç", "text"),
            ("üßΩ –õ–∞—Å—Ç–∏–∫", "eraser")
        ]

        for i, (text, tool) in enumerate(tools):
            btn = tk.Button(tools_frame, text=text, bg='#404040', fg='white',
                            command=lambda t=tool: self.set_tool(t))
            btn.pack(fill=tk.X, pady=2, padx=5)
            if tool == "brush":
                btn.configure(bg='#ff4444')
                self.current_tool_btn = btn

        # === –ö–û–õ–¨–û–†–ò ===
        colors_frame = tk.LabelFrame(self.sidebar, text="–ö–æ–ª—å–æ—Ä–∏", bg='#2b2b2b', fg='white')
        colors_frame.pack(fill=tk.X, padx=10, pady=5)

        # –®–≤–∏–¥–∫—ñ –∫–æ–ª—å–æ—Ä–∏
        colors = ["#ff0000", "#00ff00", "#0000ff", "#ffff00", "#ff00ff", "#00ffff",
                  "#ffffff", "#000000", "#ff8000", "#8000ff", "#808080", "#008000"]

        color_grid = tk.Frame(colors_frame, bg='#2b2b2b')
        color_grid.pack(fill=tk.X, padx=5, pady=5)

        for i, color in enumerate(colors):
            row, col = i // 4, i % 4
            btn = tk.Button(color_grid, bg=color, width=3, height=1,
                            command=lambda c=color: self.set_color(c))
            btn.grid(row=row, column=col, padx=2, pady=2)

        # –ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–ª—å–æ—Ä—É
        choose_btn = tk.Button(colors_frame, text="üé® –í–∏–±—Ä–∞—Ç–∏ –∫–æ–ª—ñ—Ä", bg='#404040', fg='white',
                               command=self.choose_color)
        choose_btn.pack(fill=tk.X, padx=5, pady=5)

        # –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–ª—ñ—Ä
        self.color_preview = tk.Label(colors_frame, bg=self.current_color, text="–ü–æ—Ç–æ—á–Ω–∏–π",
                                      fg='white', font=('Arial', 8))
        self.color_preview.pack(fill=tk.X, padx=5, pady=2)

        # === –†–û–ó–ú–Ü–† ===
        size_frame = tk.LabelFrame(self.sidebar, text="–†–æ–∑–º—ñ—Ä", bg='#2b2b2b', fg='white')
        size_frame.pack(fill=tk.X, padx=10, pady=5)

        self.size_var = tk.IntVar(value=self.brush_size)
        size_scale = tk.Scale(size_frame, from_=1, to=20, orient=tk.HORIZONTAL,
                              variable=self.size_var, bg='#2b2b2b', fg='white',
                              command=self.update_size)
        size_scale.pack(fill=tk.X, padx=5, pady=5)

        # === –ü–†–û–ó–û–†–Ü–°–¢–¨ ===
        alpha_frame = tk.LabelFrame(self.sidebar, text="–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –µ–∫—Ä–∞–Ω–∞", bg='#2b2b2b', fg='white')
        alpha_frame.pack(fill=tk.X, padx=10, pady=5)

        self.alpha_var = tk.DoubleVar(value=0.9)
        alpha_scale = tk.Scale(alpha_frame, from_=0.3, to=1.0, orient=tk.HORIZONTAL,
                               variable=self.alpha_var, bg='#2b2b2b', fg='white',
                               resolution=0.1, command=self.update_alpha)
        alpha_scale.pack(fill=tk.X, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ
        self.transparent_mode = tk.BooleanVar(value=False)
        tk.Checkbutton(alpha_frame, text="–ü—Ä–æ–∑–æ—Ä–∏–π —Ä–µ–∂–∏–º", variable=self.transparent_mode,
                       bg='#2b2b2b', fg='white', selectcolor='#404040',
                       command=self.toggle_transparent_mode).pack(padx=5, pady=2)

        # === –î–Ü–á ===
        actions_frame = tk.LabelFrame(self.sidebar, text="–î—ñ—ó", bg='#2b2b2b', fg='white')
        actions_frame.pack(fill=tk.X, padx=10, pady=5)

        actions = [
            ("‚Ü©Ô∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ (Ctrl+Z)", self.undo),
            ("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ (Ctrl+C)", self.clear_all),
            ("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ (Ctrl+S)", self.save_drawing),
            ("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ (Esc)", self.close_drawer)
        ]

        for text, command in actions:
            tk.Button(actions_frame, text=text, bg='#404040', fg='white',
                      command=command).pack(fill=tk.X, pady=2, padx=5)

        # === –Ü–ù–§–û ===
        info_frame = tk.LabelFrame(self.sidebar, text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", bg='#2b2b2b', fg='white')
        info_frame.pack(fill=tk.X, padx=10, pady=5)

        info_text = "–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ:\nEsc - –ó–∞–∫—Ä–∏—Ç–∏\nCtrl+Z - –°–∫–∞—Å—É–≤–∞—Ç–∏\nCtrl+C - –û—á–∏—Å—Ç–∏—Ç–∏\nCtrl+S - –ó–±–µ—Ä–µ–≥—Ç–∏"
        tk.Label(info_frame, text=info_text, bg='#2b2b2b', fg='white',
                 justify=tk.LEFT, font=('Arial', 8)).pack(padx=5, pady=5)

    def set_tool(self, tool):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É"""
        self.current_tool = tool

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≥–ª—è–¥ –∫–Ω–æ–ø–æ–∫ (–ø—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± - –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏)
        for widget in self.sidebar.winfo_children():
            if isinstance(widget, tk.LabelFrame) and widget.cget('text') == '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏':
                for btn in widget.winfo_children():
                    if isinstance(btn, tk.Button):
                        if tool in btn.cget('text').lower():
                            btn.configure(bg='#ff4444')
                            self.current_tool_btn = btn
                        else:
                            btn.configure(bg='#404040')

    def set_color(self, color):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É"""
        self.current_color = color
        self.color_preview.configure(bg=color)

    def choose_color(self):
        """–í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥"""
        # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–Ω—ñ–º–∞—î–º–æ topmost –¥–ª—è –¥—ñ–∞–ª–æ–≥—É
        self.attributes('-topmost', False)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É –∫–æ–ª—å–æ—Ä—É
        color_window = tk.Toplevel(self)
        color_window.title("–í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É")
        color_window.geometry("400x300")
        color_window.configure(bg='#2b2b2b')
        color_window.attributes('-topmost', True)
        color_window.grab_set()  # –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ

        # –ü–∞–ª—ñ—Ç—Ä–∞ –∫–æ–ª—å–æ—Ä—ñ–≤
        colors_grid = [
            ['#FF0000', '#FF4500', '#FF8C00', '#FFD700', '#FFFF00', '#ADFF2F', '#00FF00', '#00FA9A'],
            ['#00FFFF', '#00BFFF', '#0080FF', '#0000FF', '#4169E1', '#8A2BE2', '#9400D3', '#FF00FF'],
            ['#FF1493', '#DC143C', '#B22222', '#A0522D', '#8B4513', '#2F4F4F', '#708090', '#778899'],
            ['#FFFFFF', '#F5F5F5', '#DCDCDC', '#C0C0C0', '#808080', '#696969', '#2F2F2F', '#000000']
        ]

        tk.Label(color_window, text="–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä:", bg='#2b2b2b', fg='white',
                 font=('Arial', 12)).pack(pady=10)

        colors_frame = tk.Frame(color_window, bg='#2b2b2b')
        colors_frame.pack(pady=10)

        def select_color(color):
            self.set_color(color)
            color_window.destroy()

        for row_idx, row in enumerate(colors_grid):
            for col_idx, color in enumerate(row):
                btn = tk.Button(colors_frame, bg=color, width=4, height=2,
                                command=lambda c=color: select_color(c),
                                relief='raised', bd=2)
                btn.grid(row=row_idx, column=col_idx, padx=2, pady=2)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        tk.Button(color_window, text="–ó–∞–∫—Ä–∏—Ç–∏", bg='#404040', fg='white',
                  command=color_window.destroy).pack(pady=20)

    def update_size(self, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –ø–µ–Ω–∑–ª—è"""
        self.brush_size = int(value)

    def update_alpha(self, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ"""
        alpha = float(value)
        self.attributes('-alpha', alpha)

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω Canvas –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ
        if alpha < 0.7:
            self.canvas.configure(bg='gray5')
            self.configure(bg='gray5')
        else:
            self.canvas.configure(bg='gray10')
            self.configure(bg='gray20')

    def toggle_transparent_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ–≥–æ —Ä–µ–∂–∏–º—É"""
        if self.transparent_mode.get():
            # –ü—Ä–æ–∑–æ—Ä–∏–π —Ä–µ–∂–∏–º - —Ö–æ–≤–∞—î–º–æ —Ñ–æ–Ω –∞–ª–µ –ª–∏—à–∞—î–º–æ –º–∞–ª—é–Ω–∫–∏
            self.alpha_var.set(0.3)
            self.update_alpha(0.3)
            self.canvas.configure(bg='')
            self.configure(bg='')
        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º
            self.alpha_var.set(0.9)
            self.update_alpha(0.9)

    def start_draw(self, event):
        """–ü–æ—á–∞—Ç–æ–∫ –º–∞–ª—é–≤–∞–Ω–Ω—è"""
        self.drawing = True
        self.start_x, self.start_y = event.x, event.y

        print(f"Start draw at {event.x}, {event.y} with tool {self.current_tool}")  # –î–µ–±–∞–≥

        if self.current_tool == "text":
            self.add_text(event.x, event.y)
        elif self.current_tool == "eraser":
            self.erase_at_point(event.x, event.y)
        elif self.current_tool in ["brush", "pencil"]:
            # –ú–∞–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–æ—á–∫—É
            width = self.brush_size if self.current_tool == "brush" else max(1, self.brush_size // 2)
            point = self.canvas.create_oval(event.x - width // 2, event.y - width // 2,
                                            event.x + width // 2, event.y + width // 2,
                                            fill=self.current_color, outline=self.current_color)
            self.shapes.append(point)

    def draw(self, event):
        """–ü—Ä–æ—Ü–µ—Å –º–∞–ª—é–≤–∞–Ω–Ω—è"""
        if not self.drawing:
            return

        print(f"Drawing at {event.x}, {event.y}")  # –î–µ–±–∞–≥

        if self.current_tool in ["brush", "pencil"]:
            width = self.brush_size if self.current_tool == "brush" else max(1, self.brush_size // 2)
            line_id = self.canvas.create_line(self.start_x, self.start_y, event.x, event.y,
                                              fill=self.current_color, width=width,
                                              capstyle=tk.ROUND, smooth=True)
            self.shapes.append(line_id)
            self.start_x, self.start_y = event.x, event.y

        elif self.current_tool == "eraser":
            self.erase_at_point(event.x, event.y)

        elif self.current_tool in ["line", "rectangle", "circle", "ellipse", "arrow"]:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ç–∏–º—á–∞—Å–æ–≤—É —Ñ—ñ–≥—É—Ä—É
            if self.temp_shape:
                self.canvas.delete(self.temp_shape)

            # –ú–∞–ª—é—î–º–æ –Ω–æ–≤—É —Ç–∏–º—á–∞—Å–æ–≤—É —Ñ—ñ–≥—É—Ä—É
            self.temp_shape = self.draw_shape(self.start_x, self.start_y, event.x, event.y, temp=True)

    def end_draw(self, event):
        """–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –º–∞–ª—é–≤–∞–Ω–Ω—è"""
        self.drawing = False

        if self.current_tool in ["line", "rectangle", "circle", "ellipse", "arrow"]:
            if self.temp_shape:
                self.canvas.delete(self.temp_shape)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å—Ç–∞—Ç–æ—á–Ω—É —Ñ—ñ–≥—É—Ä—É
            shape_id = self.draw_shape(self.start_x, self.start_y, event.x, event.y)
            if shape_id:
                self.shapes.append(shape_id)
            self.temp_shape = None

    def draw_shape(self, x1, y1, x2, y2, temp=False):
        """–ú–∞–ª—é–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—ñ–≥—É—Ä"""
        if self.current_tool == "line":
            return self.canvas.create_line(x1, y1, x2, y2, fill=self.current_color, width=self.brush_size)

        elif self.current_tool == "rectangle":
            return self.canvas.create_rectangle(x1, y1, x2, y2, outline=self.current_color, width=self.brush_size)

        elif self.current_tool == "circle":
            # –†–æ–±–∏–º–æ –∫–æ–ª–æ (–∫–≤–∞–¥—Ä–∞—Ç–Ω—É –æ–±–ª–∞—Å—Ç—å)
            radius = max(abs(x2 - x1), abs(y2 - y1)) // 2
            cx, cy = x1, y1
            return self.canvas.create_oval(cx - radius, cy - radius, cx + radius, cy + radius,
                                           outline=self.current_color, width=self.brush_size)

        elif self.current_tool == "ellipse":
            return self.canvas.create_oval(x1, y1, x2, y2, outline=self.current_color, width=self.brush_size)

        elif self.current_tool == "arrow":
            # –ú–∞–ª—é—î–º–æ —Å—Ç—Ä—ñ–ª–∫—É
            arrow_id = self.canvas.create_line(x1, y1, x2, y2, fill=self.current_color,
                                               width=self.brush_size, arrow=tk.LAST, arrowshape=(16, 20, 6))
            return arrow_id

    def add_text(self, x, y):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""

        def submit_text():
            text = text_entry.get()
            if text:
                text_id = self.canvas.create_text(x, y, text=text, fill=self.current_color,
                                                  font=('Arial', self.brush_size + 8), anchor='nw')
                self.shapes.append(text_id)
                self.text_objects.append((text_id, text, x, y))
            dialog.destroy()

        # –î—ñ–∞–ª–æ–≥ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        dialog = tk.Toplevel(self)
        dialog.title("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç")
        dialog.geometry("300x100")
        dialog.attributes('-topmost', True)

        tk.Label(dialog, text="–¢–µ–∫—Å—Ç:").pack(pady=5)
        text_entry = tk.Entry(dialog, width=40)
        text_entry.pack(pady=5)
        text_entry.focus()

        btn_frame = tk.Frame(dialog)
        btn_frame.pack(pady=5)

        tk.Button(btn_frame, text="OK", command=submit_text).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=dialog.destroy).pack(side=tk.LEFT, padx=5)

        text_entry.bind('<Return>', lambda e: submit_text())
        dialog.bind('<Escape>', lambda e: dialog.destroy())

    def erase_at_point(self, x, y):
        """–°—Ç–∏—Ä–∞–Ω–Ω—è –≤ —Ç–æ—á—Ü—ñ"""
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–±'—î–∫—Ç–∏ –ø–æ–±–ª–∏–∑—É –∫—É—Ä—Å–æ—Ä–∞
        nearby = self.canvas.find_overlapping(x - self.brush_size, y - self.brush_size,
                                              x + self.brush_size, y + self.brush_size)
        for item in nearby:
            if item in self.shapes:
                self.canvas.delete(item)
                self.shapes.remove(item)

    def show_context_menu(self, event):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é"""
        menu = tk.Menu(self, tearoff=0)
        menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ", command=self.clear_all)
        menu.add_command(label="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=self.undo)
        menu.add_separator()
        menu.add_command(label="–ó–±–µ—Ä–µ–≥—Ç–∏", command=self.save_drawing)
        menu.add_separator()
        menu.add_command(label="–ó–∞–∫—Ä–∏—Ç–∏", command=self.close_drawer)

        try:
            menu.tk_popup(event.x_root, event.y_root)
        finally:
            menu.grab_release()

    def undo(self, event=None):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó"""
        if self.shapes:
            last_shape = self.shapes.pop()
            self.canvas.delete(last_shape)

    def clear_all(self, event=None):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ"""
        for shape in self.shapes:
            self.canvas.delete(shape)
        self.shapes.clear()
        self.text_objects.clear()

    def save_drawing(self, event=None):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞–ª—é–Ω–∫–∞ –Ω–∞–ø—Ä—è–º—É –∑ Canvas"""
        try:
            # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
            filename = f"drawing_{int(time.time())}.png"

            # –ì–µ–Ω–µ—Ä—É—î–º–æ PostScript —ñ–∑ Canvas
            ps = self.canvas.postscript(colormode='color')

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PS ‚Üí PNG —á–µ—Ä–µ–∑ Pillow
            img = Image.open(io.BytesIO(ps.encode('utf-8')))
            img.save(filename, 'png')

            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            info_window = tk.Toplevel(self)
            info_window.title("–ó–±–µ—Ä–µ–∂–µ–Ω–æ")
            info_window.geometry("300x100")
            info_window.attributes('-topmost', True)

            tk.Label(info_window, text=f"–ú–∞–ª—é–Ω–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫:\n{filename}").pack(pady=20)
            tk.Button(info_window, text="OK", command=info_window.destroy).pack()

            info_window.after(3000, info_window.destroy)

        except Exception as e:
            error_window = tk.Toplevel(self)
            error_window.title("–ü–æ–º–∏–ª–∫–∞")
            error_window.geometry("300x100")
            error_window.attributes('-topmost', True)

            tk.Label(error_window, text=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏:\n{str(e)[:50]}...").pack(pady=20)
            tk.Button(error_window, text="OK", command=error_window.destroy).pack()

    def close_drawer(self, event=None):
        self.unbind_all("<Escape>")
        self.destroy()
        self.app_instance.root.deiconify()


class AdvancedScreenSelector(tk.Toplevel):
    def __init__(self, callback):
        super().__init__()
        self.root = root
        self.callback = callback
        self.attributes('-fullscreen', True)
        self.attributes('-alpha', 0.3)
        self.canvas = tk.Canvas(self, cursor="cross", bg='black')
        self.canvas.pack(fill="both", expand=True)
        self.start_x = self.start_y = 0
        self.rect = None
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.bind("<Escape>", self.cancel_selection)

    def on_press(self, event):
        self.start_x = self.canvas.canvasx(event.x)
        self.start_y = self.canvas.canvasy(event.y)
        if self.rect:
            self.canvas.delete(self.rect)
        self.rect = self.canvas.create_rectangle(
            self.start_x, self.start_y, self.start_x, self.start_y,
            outline='red', width=2, dash=(5, 5))

    def on_drag(self, event):
        cur_x, cur_y = self.canvas.canvasx(event.x), self.canvas.canvasy(event.y)
        self.canvas.coords(self.rect, self.start_x, self.start_y, cur_x, cur_y)

    def cancel_selection(self, event):
        self.destroy()

    def on_release(self, event):
        x1 = min(self.start_x, self.canvas.canvasx(event.x))
        y1 = min(self.start_y, self.canvas.canvasy(event.y))
        x2 = max(self.start_x, self.canvas.canvasx(event.x))
        y2 = max(self.start_y, self.canvas.canvasy(event.y))

        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ
        if abs(x2 - x1) < 10 or abs(y2 - y1) < 10:
            self.destroy()
            return

        self.withdraw()
        self.after(200, lambda: self.capture_area(x1, y1, x2, y2))

    def preprocess_image(self, img):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ OCR"""
        # –ó–±—ñ–ª—å—à—É—î–º–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å –ø–æ–º—ñ—Ä–Ω–æ
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(1.5)

        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä—ñ–∑–∫—ñ—Å—Ç—å –ª–µ–≥–∫–æ
        img = img.filter(ImageFilter.SHARPEN)

        return img

    def capture_area(self, x1, y1, x2, y2):
        try:
            # –ó–∞—Ö–æ–ø–ª—é—î–º–æ –æ–±–ª–∞—Å—Ç—å
            img = ImageGrab.grab(bbox=(int(x1), int(y1), int(x2), int(y2)))

            # –ü–æ–∫—Ä–∞—â—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º'—è–∫–æ
            img = self.preprocess_image(img)

            # –ü—Ä–æ—Å—Ç—ñ—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ OCR
            text = pytesseract.image_to_string(img, lang='ukr+eng', config='--psm 6')

            # –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç
            text = text.strip()
            if not text:
                text = "[–¢–µ–∫—Å—Ç –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ]"

        except Exception as e:
            text = f"[OCR –ø–æ–º–∏–ª–∫–∞: {e}]"

        self.callback(text)
        self.destroy()

        self.root.deiconify()


class GoogleSpeechThread(threading.Thread):
    def __init__(self, callback, status_callback=None):
        super().__init__(daemon=True)
        self.callback = callback
        self.status_callback = status_callback
        self._running = True

    def run(self):
        if not PYAUDIO_AVAILABLE:
            self.callback("[–ü–æ–º–∏–ª–∫–∞: PyAudio –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install pyaudio]")
            return

        recognizer = sr.Recognizer()

        try:
            with sr.Microphone() as source:
                if self.status_callback:
                    self.status_callback("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É...")
                recognizer.adjust_for_ambient_noise(source, duration=0.5)

            if self.status_callback:
                self.status_callback("üé§ –°–ª—É—Ö–∞—é...")

            while self._running:
                try:
                    with sr.Microphone() as source:
                        audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)

                    if self.status_callback:
                        self.status_callback("üîÑ –†–æ–∑–ø—ñ–∑–Ω–∞—é...")

                    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
                    try:
                        text = recognizer.recognize_google(audio, language="uk-UA")
                    except sr.UnknownValueError:
                        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø—Ä–æ–±—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
                        try:
                            text = recognizer.recognize_google(audio, language="en-US")
                        except sr.UnknownValueError:
                            if self.status_callback:
                                self.status_callback("‚ùå –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ")
                            continue

                    timestamp = datetime.now().strftime("%H:%M:%S")
                    formatted_text = f"[{timestamp}] {text}"
                    self.callback(formatted_text)

                    if self.status_callback:
                        self.status_callback("‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ!")

                except sr.RequestError as e:
                    self.callback(f"[Google API –ø–æ–º–∏–ª–∫–∞: {e}]")
                    if self.status_callback:
                        self.status_callback("üö´ –ü–æ–º–∏–ª–∫–∞ API")
                except sr.WaitTimeoutError:
                    if self.status_callback:
                        self.status_callback("üé§ –°–ª—É—Ö–∞—é...")
                    continue
                except Exception as e:
                    self.callback(f"[–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}]")
                    if self.status_callback:
                        self.status_callback("‚ùå –ü–æ–º–∏–ª–∫–∞")

        except Exception as e:
            self.callback(f"[–ü–æ–º–∏–ª–∫–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É: {e}]")

    def stop(self):
        self._running = False


class EnhancedApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ STT + OCR + Translate Pro")
        self.root.geometry("400x550")
        self.root.minsize(500, 400)

        # –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—É
        self.speech_thread = None
        self.speech_active = False
        self.auto_translate = tk.BooleanVar()
        self.save_history = tk.BooleanVar()

        self.build_enhanced_ui()
        self.setup_hotkey()
        self.load_settings()

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.root.after(100, self.initial_show_hide)

    def build_enhanced_ui(self):
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", menu=settings_menu)
        settings_menu.add_checkbutton(label="–ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª–∞–¥", variable=self.auto_translate)
        settings_menu.add_checkbutton(label="–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", variable=self.save_history)
        settings_menu.add_separator()
        settings_menu.add_command(label="üé® –ú–∞–ª—é–≤–∞–ª–∫–∞", command=self.open_drawer)
        settings_menu.add_separator()
        settings_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", command=self.clear_history)

        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar = ttk.Frame(self.root)
        toolbar.pack(fill=tk.X, padx=5, pady=2)

        ttk.Label(toolbar, text="üî• –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø:").pack(side=tk.LEFT)
        ttk.Button(toolbar, text="üì∑", command=self.quick_ocr, width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üé§", command=self.quick_speech, width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üé®", command=self.open_drawer, width=3).pack(side=tk.LEFT, padx=2)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        # –í–∫–ª–∞–¥–∫–∏
        tab_control = ttk.Notebook(self.root)

        # === OCR TAB ===
        ocr_tab = ttk.Frame(tab_control)

        ocr_controls = ttk.Frame(ocr_tab)
        ocr_controls.pack(fill=tk.X, padx=5, pady=5)

        self.ocr_text = scrolledtext.ScrolledText(ocr_tab, wrap=tk.WORD, font=('Arial', 11))
        self.ocr_advanced_btn = ttk.Button(ocr_controls, text="üîç OCR", command=self.run_advanced_ocr)
        self.ocr_clear_btn = ttk.Button(ocr_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
                                        command=lambda: self.clear_text(self.ocr_text))
        self.ocr_copy_btn = ttk.Button(ocr_controls, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏", command=lambda: self.copy_text(self.ocr_text))

        self.ocr_advanced_btn.pack(side=tk.LEFT, padx=2)
        self.ocr_clear_btn.pack(side=tk.LEFT, padx=2)
        self.ocr_copy_btn.pack(side=tk.LEFT, padx=2)
        self.ocr_text.pack(expand=True, fill='both', padx=5, pady=5)

        # === STT TAB ===
        stt_tab = ttk.Frame(tab_control)

        stt_controls = ttk.Frame(stt_tab)
        stt_controls.pack(fill=tk.X, padx=5, pady=5)

        self.speech_text = scrolledtext.ScrolledText(stt_tab, wrap=tk.WORD, font=('Arial', 11))
        self.speech_button = ttk.Button(stt_controls, text="üéß –ü–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å", command=self.handle_speech)
        self.speech_clear_btn = ttk.Button(stt_controls, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
                                           command=lambda: self.clear_text(self.speech_text))
        self.speech_copy_btn = ttk.Button(stt_controls, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏",
                                          command=lambda: self.copy_text(self.speech_text))

        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É
        self.mic_status = ttk.Label(stt_controls, text="üî¥", font=('Arial', 16))

        self.speech_button.pack(side=tk.LEFT, padx=2)
        self.speech_clear_btn.pack(side=tk.LEFT, padx=2)
        self.speech_copy_btn.pack(side=tk.LEFT, padx=2)
        self.mic_status.pack(side=tk.RIGHT, padx=5)
        self.speech_text.pack(expand=True, fill='both', padx=5, pady=5)

        # === TRANSLATE TAB ===
        trans_tab = ttk.Frame(tab_control)

        trans_controls = ttk.Frame(trans_tab)
        trans_controls.pack(fill=tk.X, padx=5, pady=5)

        ttk.Label(trans_controls, text="–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:").pack(anchor=tk.W)
        self.input_text = scrolledtext.ScrolledText(trans_tab, wrap=tk.WORD, height=8, font=('Arial', 11))
        self.input_text.pack(fill='both', padx=5, pady=5)

        lang_frame = ttk.Frame(trans_tab)
        lang_frame.pack(fill=tk.X, padx=5, pady=2)

        ttk.Label(lang_frame, text="–ù–∞–ø—Ä—è–º–æ–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É:").pack(side=tk.LEFT)
        self.lang_combo = ttk.Combobox(lang_frame, values=[
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
            "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –ù—ñ–º–µ—Ü—å–∫–∞",
            "–ù—ñ–º–µ—Ü—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞",
            "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
        ], state="readonly", width=25)
        self.lang_combo.current(0)
        self.lang_combo.pack(side=tk.LEFT, padx=5)

        translate_btn_frame = ttk.Frame(trans_tab)
        translate_btn_frame.pack(fill=tk.X, padx=5, pady=5)

        self.translate_button = ttk.Button(translate_btn_frame, text="üåê –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏", command=self.run_translate)
        self.translate_button.pack(side=tk.LEFT, padx=2)

        ttk.Label(trans_tab, text="–ü–µ—Ä–µ–∫–ª–∞–¥:").pack(anchor=tk.W, padx=5)
        self.output_text = scrolledtext.ScrolledText(trans_tab, wrap=tk.WORD, height=8, font=('Arial', 11))
        self.output_text.pack(expand=True, fill='both', padx=5, pady=5)

        # –î–æ–¥–∞—î–º–æ –≤–∫–ª–∞–¥–∫–∏
        tab_control.add(ocr_tab, text="üñºÔ∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É")
        tab_control.add(stt_tab, text="üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥")
        tab_control.add(trans_tab, text="üåê –ü–µ—Ä–µ–∫–ª–∞–¥")
        tab_control.pack(expand=True, fill='both', padx=5, pady=5)

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≥–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        for widget in [self.ocr_text, self.speech_text, self.input_text, self.output_text]:
            widget.bind("<Control-c>", self.copy_event)
            widget.bind("<Control-v>", self.paste_event)
            widget.bind("<Control-a>", self.select_all_event)

    def update_status(self, message):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä—É"""
        self.status_var.set(message)
        self.root.update_idletasks()

    def update_mic_status(self, message):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É"""
        if "–°–ª—É—Ö–∞—é" in message:
            self.mic_status.config(text="üü¢", foreground="green")
        elif "–†–æ–∑–ø—ñ–∑–Ω–∞—é" in message:
            self.mic_status.config(text="üü°", foreground="orange")
        elif "–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ" in message:
            self.mic_status.config(text="‚úÖ", foreground="green")
        elif "–ø–æ–º–∏–ª–∫–∞" in message.lower() or "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ" in message:
            self.mic_status.config(text="üî¥", foreground="red")
        else:
            self.mic_status.config(text="‚ö™", foreground="gray")

        self.update_status(message)

    def open_drawer(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–∞–ª—é–≤–∞–ª–∫–∏"""
        try:
            self.root.withdraw()  # –•–æ–≤–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
            self.update_status("–ú–∞–ª—é–≤–∞–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞")
            ScreenDrawer(self)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞–ª—é–≤–∞–ª–∫—É: {e}")
            self.root.deiconify()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–∫–Ω–æ —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞

    def quick_ocr(self):
        """–®–≤–∏–¥–∫–∏–π OCR"""
        self.run_ocr()

    def quick_speech(self):
        """–®–≤–∏–¥–∫–∏–π –≥–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥"""
        self.handle_speech()

    def quick_translate(self):
        """–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥"""
        if self.input_text.get(1.0, tk.END).strip():
            self.run_translate()

    def clear_text(self, text_widget):
        """–û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        text_widget.delete(1.0, tk.END)

    def copy_text(self, text_widget):
        """–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        content = text_widget.get(1.0, tk.END).strip()
        if content:
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            self.update_status("–¢–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!")

    def clear_history(self):
        """–û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó"""
        for widget in [self.ocr_text, self.speech_text, self.input_text, self.output_text]:
            widget.delete(1.0, tk.END)
        self.update_status("–Ü—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞")

    def run_ocr(self):
        """–ó–∞–ø—É—Å–∫ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
        self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...")
        ScreenSelector(self.set_ocr_text)

    def run_advanced_ocr(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
        self.root.withdraw()
        self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ OCR...")
        time.sleep(0.1)
        AdvancedScreenSelector(self.set_ocr_text)


    def set_ocr_text(self, text):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        self.ocr_text.delete(1.0, tk.END)
        self.ocr_text.insert(tk.END, text.strip())

        # –ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª–∞–¥ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
        if self.auto_translate.get() and text.strip():
            self.input_text.delete(1.0, tk.END)
            self.input_text.insert(tk.END, text.strip())
            self.run_translate()

        self.update_status(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")

    def handle_speech(self):
        """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥—É"""
        if self.speech_active:
            self.speech_active = False
            if self.speech_thread:
                self.speech_thread.stop()
            self.speech_button.config(text="üéß –ü–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å")
            self.update_mic_status("–ó—É–ø–∏–Ω–µ–Ω–æ")
            return

        def speech_callback(text):
            self.speech_text.insert(tk.END, text + '\n')
            self.speech_text.see(tk.END)

            # –ê–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª–∞–¥ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
            if self.auto_translate.get():
                clean_text = text.split('] ', 1)[-1] if '] ' in text else text
                if clean_text.strip():
                    self.input_text.delete(1.0, tk.END)
                    self.input_text.insert(tk.END, clean_text.strip())
                    self.root.after(500, self.run_translate)

        self.speech_active = True
        self.speech_button.config(text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏")
        self.speech_thread = GoogleSpeechThread(speech_callback, self.update_mic_status)
        self.speech_thread.start()

    def get_translation_languages(self, selection):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        lang_map = {
            0: ("uk", "en"),  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞
            1: ("en", "uk"),  # –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
            2: ("uk", "de"),  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –ù—ñ–º–µ—Ü—å–∫–∞
            3: ("de", "uk"),  # –ù—ñ–º–µ—Ü—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
            4: ("uk", "fr"),  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Üí –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞
            5: ("fr", "uk"),  # –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞ ‚Üí –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        }
        return lang_map.get(selection, ("uk", "en"))

    def run_translate(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        text = self.input_text.get(1.0, tk.END).strip()
        if not text:
            messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É")
            return

        self.update_status("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—é...")

        try:
            from_lang, to_lang = self.get_translation_languages(self.lang_combo.current())

            translator = GoogleTranslator(source=from_lang, target=to_lang)
            translated = translator.translate(text)

            self.output_text.config(state='normal')
            self.output_text.delete(1.0, tk.END)
            self.output_text.insert(tk.END, translated)
            self.output_text.config(state='disabled')

            self.update_status(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({from_lang} ‚Üí {to_lang})")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç:\n{str(e)}")
            self.update_status("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É")

    def copy_event(self, event):
        """–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤–∏–¥—ñ–ª–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            selected = event.widget.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected)
            return "break"
        except tk.TclError:
            pass

    def paste_event(self, event):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É"""
        try:
            content = self.root.clipboard_get()
            if event.widget.winfo_class() == 'Text':
                event.widget.insert(tk.INSERT, content)
            return "break"
        except tk.TclError:
            pass

    def select_all_event(self, event):
        """–í–∏–¥—ñ–ª–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        event.widget.tag_add(tk.SEL, "1.0", tk.END)
        return "break"

    def hide_window(self):
        """–ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞"""
        self.root.withdraw()
        self.update_status("–í—ñ–∫–Ω–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ (Ctrl+Shift+Q –¥–ª—è –ø–æ–∫–∞–∑—É)")

    def initial_show_hide(self):
        def do_hide():
            self.root.deiconify()
            self.root.update_idletasks()
            self.root.withdraw()
            print("[Init] –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ")

        self.root.after(100, do_hide)

    def toggle_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤—ñ–∫–Ω–∞"""
        if self.root.state() == 'withdrawn':
            self.root.deiconify()
            self.root.lift()
            self.root.focus_force()
            self.update_status("–í—ñ–∫–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            self.hide_window()

    def setup_hotkey(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à"""

        def on_activate():
            self.root.after(0, self.toggle_visibility)

        def listen():
            try:
                hotkey = keyboard.HotKey(
                    keyboard.HotKey.parse('<ctrl>+<shift>+q'),
                    on_activate
                )

                def for_canonical(f):
                    return lambda k: f(listener.canonical(k))

                with keyboard.Listener(
                        on_press=for_canonical(hotkey.press),
                        on_release=for_canonical(hotkey.release)
                ) as listener:
                    listener.join()
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ hotkey: {e}")

        threading.Thread(target=listen, daemon=True).start()

    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É —Ñ–∞–π–ª
        pass

    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É —Ñ–∞–π–ª
        pass

    def on_close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.speech_active and self.speech_thread:
            self.speech_thread.stop()
        self.save_settings()
        self.root.withdraw()  # –•–æ–≤–∞—î–º–æ –∑–∞–º—ñ—Å—Ç—å –∑–∞–∫—Ä–∏—Ç—Ç—è


if __name__ == "__main__":
    print("[–ó–∞–ø—É—Å–∫] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—É –≤–µ—Ä—Å—ñ—é...")
    root = tk.Tk()

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ç–∏–ª—å
    style = ttk.Style()
    style.theme_use('clam')  # –°—É—á–∞—Å–Ω—ñ—à–∏–π –≤–∏–≥–ª—è–¥

    app = EnhancedApp(root)
    root.mainloop()