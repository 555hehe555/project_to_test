import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk, ImageFilter
import os

WINDOW_WIDTH = 600
WINDOW_HEIGHT = 500


class PixelArtConverter:
    def __init__(self, root):
        self.root = root
        self.original_img = None
        self.processed_img = None
        self.displayed_img = None
        self.preview_mode = "original"

        self.setup_ui()

    def setup_ui(self):
        self.root.title("–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π Pixel Art Converter")
        self.root.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT + 200}")
        self.root.resizable(True, True)
        self.root.configure(bg='#f0f0f0')

        # –°—Ç–∏–ª—å –¥–ª—è ttk –≤—ñ–¥–∂–µ—Ç—ñ–≤
        style = ttk.Style()
        style.theme_use('clam')

        # –ì–æ–ª–æ–≤–Ω–∞ —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)

        # –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        control_frame = ttk.LabelFrame(main_frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", padding="10")
        control_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        file_frame = ttk.Frame(control_frame)
        file_frame.grid(row=0, column=0, columnspan=3, pady=(0, 10))

        ttk.Button(file_frame, text="üìÅ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                   command=self.open_image).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(file_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                   command=self.save_image).grid(row=0, column=1, padx=5)
        ttk.Button(file_frame, text="üîÑ –°–∫–∏–Ω—É—Ç–∏",
                   command=self.reset_image).grid(row=0, column=2, padx=(5, 0))

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–∫—Å–µ–ª—ñ–∑–∞—Ü—ñ—ó
        ttk.Label(control_frame, text="–†–æ–∑–º—ñ—Ä –ø—ñ–∫—Å–µ–ª—è:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.pixel_size_var = tk.StringVar(value="16")
        pixel_size_scale = ttk.Scale(control_frame, from_=4, to=64,
                                     variable=self.pixel_size_var, orient=tk.HORIZONTAL,
                                     command=self.on_scale_change)
        pixel_size_scale.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 5))
        self.pixel_size_label = ttk.Label(control_frame, text="16")
        self.pixel_size_label.grid(row=1, column=2)

        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤
        ttk.Label(control_frame, text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.num_colors_var = tk.StringVar(value="16")
        colors_scale = ttk.Scale(control_frame, from_=2, to=256,
                                 variable=self.num_colors_var, orient=tk.HORIZONTAL,
                                 command=self.on_colors_change)
        colors_scale.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(10, 5))
        self.colors_label = ttk.Label(control_frame, text="16")
        self.colors_label.grid(row=2, column=2)

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
        effects_frame = ttk.LabelFrame(control_frame, text="–ï—Ñ–µ–∫—Ç–∏", padding="5")
        effects_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))

        self.blur_var = tk.BooleanVar()
        self.sharpen_var = tk.BooleanVar()
        self.dither_var = tk.BooleanVar(value=True)

        ttk.Checkbutton(effects_frame, text="–†–æ–∑–º–∏—Ç—Ç—è",
                        variable=self.blur_var, command=self.apply_pixel_art).grid(row=0, column=0, sticky=tk.W)
        ttk.Checkbutton(effects_frame, text="–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ",
                        variable=self.sharpen_var, command=self.apply_pixel_art).grid(row=0, column=1, sticky=tk.W)
        ttk.Checkbutton(effects_frame, text="–î–∏–∑–µ—Ä–∏–Ω–≥",
                        variable=self.dither_var, command=self.apply_pixel_art).grid(row=0, column=2, sticky=tk.W)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è effects_frame
        effects_frame.columnconfigure(0, weight=1)
        effects_frame.columnconfigure(1, weight=1)
        effects_frame.columnconfigure(2, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
        ttk.Button(control_frame, text="üé® –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ Pixel Art",
                   command=self.apply_pixel_art).grid(row=4, column=0, columnspan=3, pady=(10, 0))

        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤ –ø–µ—Ä–µ–≥–ª—è–¥—É
        view_frame = ttk.Frame(main_frame)
        view_frame.grid(row=1, column=0, columnspan=2, pady=(0, 10))

        ttk.Button(view_frame, text="üì∑ –û—Ä–∏–≥—ñ–Ω–∞–ª",
                   command=lambda: self.switch_view("original")).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(view_frame, text="üéÆ Pixel Art",
                   command=lambda: self.switch_view("processed")).pack(side=tk.LEFT)

        # –û–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.canvas_frame = ttk.Frame(main_frame)
        self.canvas_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.canvas = tk.Canvas(self.canvas_frame, bg='white', relief=tk.SUNKEN, borderwidth=2)

        # –°–∫—Ä–æ–ª–±–∞—Ä–∏ –¥–ª—è –∫–∞–Ω–≤–∞—Å–∞
        v_scrollbar = ttk.Scrollbar(self.canvas_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        h_scrollbar = ttk.Scrollbar(self.canvas_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)

        self.canvas.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        self.canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        self.canvas_frame.columnconfigure(0, weight=1)
        self.canvas_frame.rowconfigure(0, weight=1)

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ä—è–¥–æ–∫
        self.info_var = tk.StringVar(value="–í–∏–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏")
        info_label = ttk.Label(main_frame, textvariable=self.info_var, relief=tk.SUNKEN)
        info_label.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))

    def on_scale_change(self, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –ø—ñ–∫—Å–µ–ª—è"""
        self.pixel_size_label.config(text=str(int(float(value))))
        if self.original_img:
            self.apply_pixel_art()

    def on_colors_change(self, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä—ñ–≤"""
        self.colors_label.config(text=str(int(float(value))))
        if self.original_img:
            self.apply_pixel_art()

    def open_image(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        filetypes = [
            ("–í—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ", "*.png;*.jpg;*.jpeg;*.gif;*.bmp;*.tiff"),
            ("PNG —Ñ–∞–π–ª–∏", "*.png"),
            ("JPEG —Ñ–∞–π–ª–∏", "*.jpg;*.jpeg"),
            ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
        ]

        path = filedialog.askopenfilename(filetypes=filetypes)
        if path:
            try:
                self.original_img = Image.open(path)
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if self.original_img.mode in ('RGBA', 'LA', 'P'):
                    self.original_img = self.original_img.convert('RGB')

                self.info_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {os.path.basename(path)} | "
                                  f"–†–æ–∑–º—ñ—Ä: {self.original_img.width}x{self.original_img.height}")

                self.preview_mode = "original"
                self.update_display()

            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª:\n{str(e)}")

    def to_pixel_art(self, img, pixel_size=16, num_colors=16):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø—ñ–∫—Å–µ–ª—å–Ω—É –≥—Ä–∞—Ñ—ñ–∫—É"""
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –ø—ñ–∫—Å–µ–ª—ñ–∑–∞—Ü—ñ—î—é
        processed = img.copy()

        if self.blur_var.get():
            processed = processed.filter(ImageFilter.BLUR)

        if self.sharpen_var.get():
            processed = processed.filter(ImageFilter.SHARPEN)

        # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Å—Ç–∏—Å–∫–∞–Ω–Ω—è
        new_width = max(1, processed.width // pixel_size)
        new_height = max(1, processed.height // pixel_size)

        # –°—Ç–∏—Å–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º BOX —Ñ—ñ–ª—å—Ç—Ä–∞ –¥–ª—è –ø—ñ–∫—Å–µ–ª—ñ–∑–∞—Ü—ñ—ó
        pixel_art = processed.resize((new_width, new_height), resample=Image.Resampling.BOX)

        # –ó–±—ñ–ª—å—à—É—î–º–æ –Ω–∞–∑–∞–¥ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –±–µ–∑ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
        pixel_art = pixel_art.resize((processed.width, processed.height), resample=Image.Resampling.NEAREST)

        # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—è –∫–æ–ª—å–æ—Ä—ñ–≤
        if self.dither_var.get():
            pixel_art = pixel_art.quantize(colors=num_colors, method=Image.MEDIANCUT, dither=Image.FLOYDSTEINBERG)
        else:
            pixel_art = pixel_art.quantize(colors=num_colors, method=Image.MEDIANCUT, dither=0)

        return pixel_art.convert('RGB')

    def apply_pixel_art(self):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É –ø—ñ–∫—Å–µ–ª—å–Ω–æ—ó –≥—Ä–∞—Ñ—ñ–∫–∏"""
        if not self.original_img:
            return

        try:
            pixel_size = max(1, int(float(self.pixel_size_var.get())))
            num_colors = max(2, min(256, int(float(self.num_colors_var.get()))))

            self.processed_img = self.to_pixel_art(self.original_img, pixel_size, num_colors)

            if self.preview_mode == "processed":
                self.update_display()

            self.info_var.set(f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: –ø—ñ–∫—Å–µ–ª—ñ {pixel_size}x{pixel_size}, –∫–æ–ª—å–æ—Ä—ñ–≤: {num_colors}")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ:\n{str(e)}")

    def switch_view(self, mode):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –æ—Ä–∏–≥—ñ–Ω–∞–ª–æ–º —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º"""
        if mode == "original" and self.original_img:
            self.preview_mode = "original"
            self.update_display()
        elif mode == "processed" and self.processed_img:
            self.preview_mode = "processed"
            self.update_display()

    def update_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞–Ω–≤–∞—Å—ñ"""
        if self.preview_mode == "original" and self.original_img:
            img_to_show = self.original_img
        elif self.preview_mode == "processed" and self.processed_img:
            img_to_show = self.processed_img
        else:
            return

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        display_img = self.prepare_for_display(img_to_show)
        self.displayed_img = ImageTk.PhotoImage(display_img)

        # –û—á–∏—â–µ–Ω–Ω—è –∫–∞–Ω–≤–∞—Å–∞ —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.canvas.delete("all")
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.displayed_img)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–ª–∞—Å—Ç—ñ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def prepare_for_display(self, img):
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—ñ–≤ –≤—ñ–∫–Ω–∞"""
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∫–∞–Ω–≤–∞—Å–∞
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()

        # –Ø–∫—â–æ –∫–∞–Ω–≤–∞—Å —â–µ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
        if canvas_width <= 1:
            canvas_width = WINDOW_WIDTH - 50
            canvas_height = WINDOW_HEIGHT - 50

        # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
        w_ratio = (canvas_width - 20) / img.width
        h_ratio = (canvas_height - 20) / img.height
        ratio = min(w_ratio, h_ratio, 1)  # –ù–µ –∑–±—ñ–ª—å—à—É—î–º–æ –ø–æ–Ω–∞–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä

        if ratio < 1:
            new_size = (int(img.width * ratio), int(img.height * ratio))
            return img.resize(new_size, Image.Resampling.LANCZOS)
        else:
            return img

    def reset_image(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if self.original_img:
            self.preview_mode = "original"
            self.processed_img = None
            self.update_display()
            self.info_var.set("–°–∫–∏–Ω—É—Ç–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É")

    def save_image(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not self.processed_img:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ –µ—Ñ–µ–∫—Ç Pixel Art")
            return

        filetypes = [
            ("PNG —Ñ–∞–π–ª–∏", "*.png"),
            ("JPEG —Ñ–∞–π–ª–∏", "*.jpg"),
            ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
        ]

        path = filedialog.asksaveasfilename(
            defaultextension=".png",
            filetypes=filetypes
        )

        if path:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB –¥–ª—è JPEG
                if path.lower().endswith(('.jpg', '.jpeg')):
                    save_img = self.processed_img.convert('RGB')
                else:
                    save_img = self.processed_img

                save_img.save(path)
                self.info_var.set(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(path)}")

            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª:\n{str(e)}")


def main():
    root = tk.Tk()
    app = PixelArtConverter(root)
    root.mainloop()


if __name__ == "__main__":
    main()